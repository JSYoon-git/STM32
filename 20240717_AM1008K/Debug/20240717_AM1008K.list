
20240717_AM1008K.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ebc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002fc8  08002fc8  00003fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003094  08003094  00004094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800309c  0800309c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800309c  0800309c  0000409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030a0  080030a0  000040a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080030a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000005c  08003100  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08003100  000052a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009afe  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001820  00000000  00000000  0000eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  000103a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000781  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167a8  00000000  00000000  000114c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c128  00000000  00000000  00027c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082fb4  00000000  00000000  00033d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6d4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c68  00000000  00000000  000b6d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b99f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb0 	.word	0x08002fb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002fb0 	.word	0x08002fb0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b0a3      	sub	sp, #140	@ 0x8c
 8000160:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbb1 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f895 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f927 	bl	80003bc <MX_GPIO_Init>
  MX_I2C1_Init();
 800016e:	f000 f8cd 	bl	800030c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8f9 	bl	8000368 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  am1008w_k_i2c_begin(&hi2c1);
 8000176:	4842      	ldr	r0, [pc, #264]	@ (8000280 <main+0x124>)
 8000178:	f000 f948 	bl	800040c <am1008w_k_i2c_begin>
  char buffer[100];

  while (1)
  {

	  am1008w_k_i2c_read_data_command();
 800017c:	f000 f954 	bl	8000428 <am1008w_k_i2c_read_data_command>

	  int humidity = am1008w_k_i2c_get_humidity();
 8000180:	f000 fa26 	bl	80005d0 <am1008w_k_i2c_get_humidity>
 8000184:	6778      	str	r0, [r7, #116]	@ 0x74
	  int temperature = am1008w_k_i2c_get_temperature();
 8000186:	f000 fa2d 	bl	80005e4 <am1008w_k_i2c_get_temperature>
 800018a:	6738      	str	r0, [r7, #112]	@ 0x70

	  uint16_t voc = am1008w_k_i2c_get_voc();
 800018c:	f000 fa16 	bl	80005bc <am1008w_k_i2c_get_voc>
 8000190:	4603      	mov	r3, r0
 8000192:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  uint16_t co2 = am1008w_k_i2c_get_co2();
 8000196:	f000 fa07 	bl	80005a8 <am1008w_k_i2c_get_co2>
 800019a:	4603      	mov	r3, r0
 800019c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	  uint16_t pm1p0 = am1008w_k_i2c_get_pm1p0();
 80001a0:	f000 fa2a 	bl	80005f8 <am1008w_k_i2c_get_pm1p0>
 80001a4:	4603      	mov	r3, r0
 80001a6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	  uint16_t pm2p5 = am1008w_k_i2c_get_pm2p5();
 80001aa:	f000 fa2f 	bl	800060c <am1008w_k_i2c_get_pm2p5>
 80001ae:	4603      	mov	r3, r0
 80001b0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
	  uint16_t pm10  = am1008w_k_i2c_get_pm10();
 80001b4:	f000 fa34 	bl	8000620 <am1008w_k_i2c_get_pm10>
 80001b8:	4603      	mov	r3, r0
 80001ba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

	  sprintf(buffer, "Humidity: %d.%02d %%, Temperature: %d.%02d C\r\n",
 80001be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80001c0:	4a30      	ldr	r2, [pc, #192]	@ (8000284 <main+0x128>)
 80001c2:	fb82 1203 	smull	r1, r2, r2, r3
 80001c6:	1092      	asrs	r2, r2, #2
 80001c8:	17db      	asrs	r3, r3, #31
 80001ca:	1ad6      	subs	r6, r2, r3
 80001cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80001ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000284 <main+0x128>)
 80001d0:	fb83 1302 	smull	r1, r3, r3, r2
 80001d4:	1099      	asrs	r1, r3, #2
 80001d6:	17d3      	asrs	r3, r2, #31
 80001d8:	1ac8      	subs	r0, r1, r3
 80001da:	4603      	mov	r3, r0
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	4403      	add	r3, r0
 80001e0:	005b      	lsls	r3, r3, #1
 80001e2:	1ad0      	subs	r0, r2, r3
 80001e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80001e6:	4a27      	ldr	r2, [pc, #156]	@ (8000284 <main+0x128>)
 80001e8:	fb82 1203 	smull	r1, r2, r2, r3
 80001ec:	1092      	asrs	r2, r2, #2
 80001ee:	17db      	asrs	r3, r3, #31
 80001f0:	1ad4      	subs	r4, r2, r3
 80001f2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80001f4:	4b23      	ldr	r3, [pc, #140]	@ (8000284 <main+0x128>)
 80001f6:	fb83 2301 	smull	r2, r3, r3, r1
 80001fa:	109a      	asrs	r2, r3, #2
 80001fc:	17cb      	asrs	r3, r1, #31
 80001fe:	1ad2      	subs	r2, r2, r3
 8000200:	4613      	mov	r3, r2
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	4413      	add	r3, r2
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	1aca      	subs	r2, r1, r3
 800020a:	463d      	mov	r5, r7
 800020c:	9201      	str	r2, [sp, #4]
 800020e:	9400      	str	r4, [sp, #0]
 8000210:	4603      	mov	r3, r0
 8000212:	4632      	mov	r2, r6
 8000214:	491c      	ldr	r1, [pc, #112]	@ (8000288 <main+0x12c>)
 8000216:	4628      	mov	r0, r5
 8000218:	f002 fa1a 	bl	8002650 <siprintf>
			  humidity / 10, humidity % 10, temperature / 10, temperature % 10);

	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800021c:	463b      	mov	r3, r7
 800021e:	4618      	mov	r0, r3
 8000220:	f7ff ff94 	bl	800014c <strlen>
 8000224:	4603      	mov	r3, r0
 8000226:	b29a      	uxth	r2, r3
 8000228:	4639      	mov	r1, r7
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	4817      	ldr	r0, [pc, #92]	@ (800028c <main+0x130>)
 8000230:	f002 f88e 	bl	8002350 <HAL_UART_Transmit>

	  sprintf(buffer, "CO2: %d ppm, VOC: %d ppb, PM1.0: %d, PM2.5: %d, PM10: %d\r\n",
 8000234:	f8b7 406c 	ldrh.w	r4, [r7, #108]	@ 0x6c
 8000238:	f8b7 506e 	ldrh.w	r5, [r7, #110]	@ 0x6e
 800023c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000240:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8000244:	f8b7 1066 	ldrh.w	r1, [r7, #102]	@ 0x66
 8000248:	4638      	mov	r0, r7
 800024a:	9102      	str	r1, [sp, #8]
 800024c:	9201      	str	r2, [sp, #4]
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	462b      	mov	r3, r5
 8000252:	4622      	mov	r2, r4
 8000254:	490e      	ldr	r1, [pc, #56]	@ (8000290 <main+0x134>)
 8000256:	f002 f9fb 	bl	8002650 <siprintf>
	                  co2, voc, pm1p0, pm2p5, pm10);

	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800025a:	463b      	mov	r3, r7
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff75 	bl	800014c <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	b29a      	uxth	r2, r3
 8000266:	4639      	mov	r1, r7
 8000268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026c:	4807      	ldr	r0, [pc, #28]	@ (800028c <main+0x130>)
 800026e:	f002 f86f 	bl	8002350 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000272:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000276:	f000 fb89 	bl	800098c <HAL_Delay>
  {
 800027a:	bf00      	nop
 800027c:	e77e      	b.n	800017c <main+0x20>
 800027e:	bf00      	nop
 8000280:	20000078 	.word	0x20000078
 8000284:	66666667 	.word	0x66666667
 8000288:	08002fc8 	.word	0x08002fc8
 800028c:	200000cc 	.word	0x200000cc
 8000290:	08002ff8 	.word	0x08002ff8

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b090      	sub	sp, #64	@ 0x40
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2228      	movs	r2, #40	@ 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 f9f4 	bl	8002690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	2310      	movs	r3, #16
 80002c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c2:	2300      	movs	r3, #0
 80002c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fbe0 	bl	8001a90 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002d6:	f000 f893 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002de:	2300      	movs	r3, #0
 80002e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fe4e 	bl	8001f94 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002fe:	f000 f87f 	bl	8000400 <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3740      	adds	r7, #64	@ 0x40
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000310:	4b13      	ldr	r3, [pc, #76]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000312:	4a14      	ldr	r2, [pc, #80]	@ (8000364 <MX_I2C1_Init+0x58>)
 8000314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 30000;
 8000316:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000318:	f247 5230 	movw	r2, #30000	@ 0x7530
 800031c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800031e:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000324:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032a:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <MX_I2C1_Init+0x54>)
 800032c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000332:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000338:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <MX_I2C1_Init+0x54>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033e:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <MX_I2C1_Init+0x54>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800034a:	4805      	ldr	r0, [pc, #20]	@ (8000360 <MX_I2C1_Init+0x54>)
 800034c:	f000 fdaa 	bl	8000ea4 <HAL_I2C_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000356:	f000 f853 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000078 	.word	0x20000078
 8000364:	40005400 	.word	0x40005400

08000368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800036e:	4a12      	ldr	r2, [pc, #72]	@ (80003b8 <MX_USART1_UART_Init+0x50>)
 8000370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000372:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800038e:	2208      	movs	r2, #8
 8000390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f001 ff86 	bl	80022b0 <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003aa:	f000 f829 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000cc 	.word	0x200000cc
 80003b8:	40013800 	.word	0x40013800

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_GPIO_Init+0x40>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a0d      	ldr	r2, [pc, #52]	@ (80003fc <MX_GPIO_Init+0x40>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_GPIO_Init+0x40>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <MX_GPIO_Init+0x40>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a07      	ldr	r2, [pc, #28]	@ (80003fc <MX_GPIO_Init+0x40>)
 80003e0:	f043 0308 	orr.w	r3, r3, #8
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <MX_GPIO_Init+0x40>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0308 	and.w	r3, r3, #8
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <Error_Handler+0x8>

0800040c <am1008w_k_i2c_begin>:
static uint16_t _voc_now_r_ref_r;
static uint16_t _voc_ref_r;
static uint16_t _voc_now_r;
static am1008w_k_i2c_status _pm_sensor_status_alarm;

void am1008w_k_i2c_begin(I2C_HandleTypeDef *hi2c) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
    mhi2c = hi2c;
 8000414:	4a03      	ldr	r2, [pc, #12]	@ (8000424 <am1008w_k_i2c_begin+0x18>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6013      	str	r3, [r2, #0]
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	20000114 	.word	0x20000114

08000428 <am1008w_k_i2c_read_data_command>:

uint8_t am1008w_k_i2c_calibrate_co2(uint16_t range) {
    return am1008w_k_i2c_send_command_data(AM1008W_K_I2C_CTRL_CO2_CALIBRATION, range);
}

uint8_t am1008w_k_i2c_read_data_command() {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af02      	add	r7, sp, #8

    HAL_I2C_Master_Receive(mhi2c, (AM1008W_K_I2C_ADDRESS << 1) | 1, _buffer, 25, HAL_MAX_DELAY);
 800042e:	4b50      	ldr	r3, [pc, #320]	@ (8000570 <am1008w_k_i2c_read_data_command+0x148>)
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2319      	movs	r3, #25
 800043a:	4a4e      	ldr	r2, [pc, #312]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 800043c:	2151      	movs	r1, #81	@ 0x51
 800043e:	f000 fe75 	bl	800112c <HAL_I2C_Master_Receive>

    uint8_t idx = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	717b      	strb	r3, [r7, #5]

    if (_buffer[0] != AM1008W_K_I2C_FRAME_STX) {
 8000446:	4b4b      	ldr	r3, [pc, #300]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b16      	cmp	r3, #22
 800044c:	d001      	beq.n	8000452 <am1008w_k_i2c_read_data_command+0x2a>
        return 2; // Frame header different
 800044e:	2302      	movs	r3, #2
 8000450:	e089      	b.n	8000566 <am1008w_k_i2c_read_data_command+0x13e>
    }

    if (_buffer[1] != AM1008W_K_I2C_LEN_READ_DATA_COMMAND) {
 8000452:	4b48      	ldr	r3, [pc, #288]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	2b19      	cmp	r3, #25
 8000458:	d001      	beq.n	800045e <am1008w_k_i2c_read_data_command+0x36>
        return 3; // Frame length different
 800045a:	2303      	movs	r3, #3
 800045c:	e083      	b.n	8000566 <am1008w_k_i2c_read_data_command+0x13e>
    }

    uint8_t check_code = _buffer[0];
 800045e:	4b45      	ldr	r3, [pc, #276]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 1; i < AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1; i++) {
 8000464:	2301      	movs	r3, #1
 8000466:	71bb      	strb	r3, [r7, #6]
 8000468:	e008      	b.n	800047c <am1008w_k_i2c_read_data_command+0x54>
        check_code ^= _buffer[i];
 800046a:	79bb      	ldrb	r3, [r7, #6]
 800046c:	4a41      	ldr	r2, [pc, #260]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 800046e:	5cd2      	ldrb	r2, [r2, r3]
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	4053      	eors	r3, r2
 8000474:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 1; i < AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1; i++) {
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	3301      	adds	r3, #1
 800047a:	71bb      	strb	r3, [r7, #6]
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	2b17      	cmp	r3, #23
 8000480:	d9f3      	bls.n	800046a <am1008w_k_i2c_read_data_command+0x42>
    }

    if (_buffer[AM1008W_K_I2C_LEN_READ_DATA_COMMAND - 1] != check_code) {
 8000482:	4b3c      	ldr	r3, [pc, #240]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000484:	7e1b      	ldrb	r3, [r3, #24]
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	429a      	cmp	r2, r3
 800048a:	d001      	beq.n	8000490 <am1008w_k_i2c_read_data_command+0x68>
        return 4; // Checksum wrong
 800048c:	2304      	movs	r3, #4
 800048e:	e06a      	b.n	8000566 <am1008w_k_i2c_read_data_command+0x13e>
    }

    _pm_operation_mode = _buffer[2];
 8000490:	4b38      	ldr	r3, [pc, #224]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000492:	789a      	ldrb	r2, [r3, #2]
 8000494:	4b38      	ldr	r3, [pc, #224]	@ (8000578 <am1008w_k_i2c_read_data_command+0x150>)
 8000496:	701a      	strb	r2, [r3, #0]
    _co2 = (_buffer[3] << 8) + _buffer[4];
 8000498:	4b36      	ldr	r3, [pc, #216]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 800049a:	78db      	ldrb	r3, [r3, #3]
 800049c:	021b      	lsls	r3, r3, #8
 800049e:	b29b      	uxth	r3, r3
 80004a0:	4a34      	ldr	r2, [pc, #208]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004a2:	7912      	ldrb	r2, [r2, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	4b34      	ldr	r3, [pc, #208]	@ (800057c <am1008w_k_i2c_read_data_command+0x154>)
 80004aa:	801a      	strh	r2, [r3, #0]
    _voc = (_buffer[5] << 8) + _buffer[6];
 80004ac:	4b31      	ldr	r3, [pc, #196]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004ae:	795b      	ldrb	r3, [r3, #5]
 80004b0:	021b      	lsls	r3, r3, #8
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004b6:	7992      	ldrb	r2, [r2, #6]
 80004b8:	4413      	add	r3, r2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b30      	ldr	r3, [pc, #192]	@ (8000580 <am1008w_k_i2c_read_data_command+0x158>)
 80004be:	801a      	strh	r2, [r3, #0]
    _humidity = ((_buffer[7] << 8) + _buffer[8]);
 80004c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004c2:	79db      	ldrb	r3, [r3, #7]
 80004c4:	021b      	lsls	r3, r3, #8
 80004c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004c8:	7a12      	ldrb	r2, [r2, #8]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000584 <am1008w_k_i2c_read_data_command+0x15c>)
 80004ce:	6013      	str	r3, [r2, #0]
    _temperature = ((_buffer[9] << 8) + _buffer[10] - 500);
 80004d0:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004d2:	7a5b      	ldrb	r3, [r3, #9]
 80004d4:	021b      	lsls	r3, r3, #8
 80004d6:	4a27      	ldr	r2, [pc, #156]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004d8:	7a92      	ldrb	r2, [r2, #10]
 80004da:	4413      	add	r3, r2
 80004dc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80004e0:	4a29      	ldr	r2, [pc, #164]	@ (8000588 <am1008w_k_i2c_read_data_command+0x160>)
 80004e2:	6013      	str	r3, [r2, #0]
    _pm1p0 = (_buffer[11] << 8) + _buffer[12];
 80004e4:	4b23      	ldr	r3, [pc, #140]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004e6:	7adb      	ldrb	r3, [r3, #11]
 80004e8:	021b      	lsls	r3, r3, #8
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	4a21      	ldr	r2, [pc, #132]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004ee:	7b12      	ldrb	r2, [r2, #12]
 80004f0:	4413      	add	r3, r2
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b25      	ldr	r3, [pc, #148]	@ (800058c <am1008w_k_i2c_read_data_command+0x164>)
 80004f6:	801a      	strh	r2, [r3, #0]
    _pm2p5 = (_buffer[13] << 8) + _buffer[14];
 80004f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 80004fa:	7b5b      	ldrb	r3, [r3, #13]
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	b29b      	uxth	r3, r3
 8000500:	4a1c      	ldr	r2, [pc, #112]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000502:	7b92      	ldrb	r2, [r2, #14]
 8000504:	4413      	add	r3, r2
 8000506:	b29a      	uxth	r2, r3
 8000508:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <am1008w_k_i2c_read_data_command+0x168>)
 800050a:	801a      	strh	r2, [r3, #0]
    _pm10 = (_buffer[15] << 8) + _buffer[16];
 800050c:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 800050e:	7bdb      	ldrb	r3, [r3, #15]
 8000510:	021b      	lsls	r3, r3, #8
 8000512:	b29b      	uxth	r3, r3
 8000514:	4a17      	ldr	r2, [pc, #92]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000516:	7c12      	ldrb	r2, [r2, #16]
 8000518:	4413      	add	r3, r2
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b1d      	ldr	r3, [pc, #116]	@ (8000594 <am1008w_k_i2c_read_data_command+0x16c>)
 800051e:	801a      	strh	r2, [r3, #0]
    _voc_now_r_ref_r = (_buffer[17] << 8) + _buffer[18];
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000522:	7c5b      	ldrb	r3, [r3, #17]
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	b29b      	uxth	r3, r3
 8000528:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 800052a:	7c92      	ldrb	r2, [r2, #18]
 800052c:	4413      	add	r3, r2
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <am1008w_k_i2c_read_data_command+0x170>)
 8000532:	801a      	strh	r2, [r3, #0]
    _voc_ref_r = (_buffer[19] << 8) + _buffer[20];
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000536:	7cdb      	ldrb	r3, [r3, #19]
 8000538:	021b      	lsls	r3, r3, #8
 800053a:	b29b      	uxth	r3, r3
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 800053e:	7d12      	ldrb	r2, [r2, #20]
 8000540:	4413      	add	r3, r2
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b15      	ldr	r3, [pc, #84]	@ (800059c <am1008w_k_i2c_read_data_command+0x174>)
 8000546:	801a      	strh	r2, [r3, #0]
    _voc_now_r = (_buffer[21] << 8) + _buffer[22];
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 800054a:	7d5b      	ldrb	r3, [r3, #21]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	b29b      	uxth	r3, r3
 8000550:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 8000552:	7d92      	ldrb	r2, [r2, #22]
 8000554:	4413      	add	r3, r2
 8000556:	b29a      	uxth	r2, r3
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <am1008w_k_i2c_read_data_command+0x178>)
 800055a:	801a      	strh	r2, [r3, #0]
    _pm_sensor_status_alarm.value = _buffer[23];
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <am1008w_k_i2c_read_data_command+0x14c>)
 800055e:	7dda      	ldrb	r2, [r3, #23]
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <am1008w_k_i2c_read_data_command+0x17c>)
 8000562:	701a      	strb	r2, [r3, #0]

    return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000114 	.word	0x20000114
 8000574:	20000118 	.word	0x20000118
 8000578:	20000138 	.word	0x20000138
 800057c:	2000013a 	.word	0x2000013a
 8000580:	2000013c 	.word	0x2000013c
 8000584:	20000140 	.word	0x20000140
 8000588:	20000144 	.word	0x20000144
 800058c:	20000148 	.word	0x20000148
 8000590:	2000014a 	.word	0x2000014a
 8000594:	2000014c 	.word	0x2000014c
 8000598:	2000014e 	.word	0x2000014e
 800059c:	20000150 	.word	0x20000150
 80005a0:	20000152 	.word	0x20000152
 80005a4:	20000154 	.word	0x20000154

080005a8 <am1008w_k_i2c_get_co2>:

uint8_t am1008w_k_i2c_get_pm_operation_mode() {
    return _pm_operation_mode;
}

uint16_t am1008w_k_i2c_get_co2() {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
    return _co2;
 80005ac:	4b02      	ldr	r3, [pc, #8]	@ (80005b8 <am1008w_k_i2c_get_co2+0x10>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	2000013a 	.word	0x2000013a

080005bc <am1008w_k_i2c_get_voc>:

uint16_t am1008w_k_i2c_get_voc() {
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
    return _voc;
 80005c0:	4b02      	ldr	r3, [pc, #8]	@ (80005cc <am1008w_k_i2c_get_voc+0x10>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	2000013c 	.word	0x2000013c

080005d0 <am1008w_k_i2c_get_humidity>:

int am1008w_k_i2c_get_humidity() {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
    return _humidity;
 80005d4:	4b02      	ldr	r3, [pc, #8]	@ (80005e0 <am1008w_k_i2c_get_humidity+0x10>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	20000140 	.word	0x20000140

080005e4 <am1008w_k_i2c_get_temperature>:

int am1008w_k_i2c_get_temperature() {
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
    return _temperature;
 80005e8:	4b02      	ldr	r3, [pc, #8]	@ (80005f4 <am1008w_k_i2c_get_temperature+0x10>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	20000144 	.word	0x20000144

080005f8 <am1008w_k_i2c_get_pm1p0>:

uint16_t am1008w_k_i2c_get_pm1p0() {
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
    return _pm1p0;
 80005fc:	4b02      	ldr	r3, [pc, #8]	@ (8000608 <am1008w_k_i2c_get_pm1p0+0x10>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	20000148 	.word	0x20000148

0800060c <am1008w_k_i2c_get_pm2p5>:

uint16_t am1008w_k_i2c_get_pm2p5() {
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
    return _pm2p5;
 8000610:	4b02      	ldr	r3, [pc, #8]	@ (800061c <am1008w_k_i2c_get_pm2p5+0x10>)
 8000612:	881b      	ldrh	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	2000014a 	.word	0x2000014a

08000620 <am1008w_k_i2c_get_pm10>:

uint16_t am1008w_k_i2c_get_pm10() {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
    return _pm10;
 8000624:	4b02      	ldr	r3, [pc, #8]	@ (8000630 <am1008w_k_i2c_get_pm10+0x10>)
 8000626:	881b      	ldrh	r3, [r3, #0]
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	2000014c 	.word	0x2000014c

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <HAL_I2C_MspInit+0x70>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d123      	bne.n	8000700 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <HAL_I2C_MspInit+0x74>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a13      	ldr	r2, [pc, #76]	@ (800070c <HAL_I2C_MspInit+0x74>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <HAL_I2C_MspInit+0x74>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d0:	23c0      	movs	r3, #192	@ 0xc0
 80006d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	2312      	movs	r3, #18
 80006d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <HAL_I2C_MspInit+0x78>)
 80006e4:	f000 fa5a 	bl	8000b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <HAL_I2C_MspInit+0x74>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a07      	ldr	r2, [pc, #28]	@ (800070c <HAL_I2C_MspInit+0x74>)
 80006ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006f2:	61d3      	str	r3, [r2, #28]
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_I2C_MspInit+0x74>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40005400 	.word	0x40005400
 800070c:	40021000 	.word	0x40021000
 8000710:	40010c00 	.word	0x40010c00

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <HAL_UART_MspInit+0x8c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d131      	bne.n	8000798 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <HAL_UART_MspInit+0x94>)
 800077a:	f000 fa0f 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800077e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <HAL_UART_MspInit+0x94>)
 8000794:	f000 fa02 	bl	8000b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <NMI_Handler+0x4>

080007b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <MemManage_Handler+0x4>

080007c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 f8aa 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800080c:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <_sbrk+0x5c>)
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <_sbrk+0x60>)
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <_sbrk+0x64>)
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <_sbrk+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d207      	bcs.n	8000844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000834:	f001 ff34 	bl	80026a0 <__errno>
 8000838:	4603      	mov	r3, r0
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	e009      	b.n	8000858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <_sbrk+0x64>)
 8000854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20005000 	.word	0x20005000
 8000864:	00000400 	.word	0x00000400
 8000868:	20000158 	.word	0x20000158
 800086c:	200002a8 	.word	0x200002a8

08000870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 800087c:	f7ff fff8 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000882:	490c      	ldr	r1, [pc, #48]	@ (80008b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000898:	4c09      	ldr	r4, [pc, #36]	@ (80008c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f001 ff01 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fc57 	bl	800015c <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008b8:	080030a4 	.word	0x080030a4
  ldr r2, =_sbss
 80008bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008c0:	200002a8 	.word	0x200002a8

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f92b 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff fea6 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f935 	bl	8000b82 <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 f90b 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	@ (8000974 <HAL_IncTick+0x20>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000008 	.word	0x20000008
 8000974:	2000015c 	.word	0x2000015c

08000978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b02      	ldr	r3, [pc, #8]	@ (8000988 <HAL_GetTick+0x10>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	2000015c 	.word	0x2000015c

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff fff0 	bl	8000978 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffe0 	bl	8000978 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	@ (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	@ (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	@ 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	@ 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff90 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff49 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff5e 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff90 	bl	8000a8c <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffb0 	bl	8000af0 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b08b      	sub	sp, #44	@ 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	e169      	b.n	8000e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f040 8158 	bne.w	8000e7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4a9a      	ldr	r2, [pc, #616]	@ (8000e3c <HAL_GPIO_Init+0x2a0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d05e      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bd8:	4a98      	ldr	r2, [pc, #608]	@ (8000e3c <HAL_GPIO_Init+0x2a0>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d875      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bde:	4a98      	ldr	r2, [pc, #608]	@ (8000e40 <HAL_GPIO_Init+0x2a4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d058      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000be4:	4a96      	ldr	r2, [pc, #600]	@ (8000e40 <HAL_GPIO_Init+0x2a4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d86f      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bea:	4a96      	ldr	r2, [pc, #600]	@ (8000e44 <HAL_GPIO_Init+0x2a8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d052      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bf0:	4a94      	ldr	r2, [pc, #592]	@ (8000e44 <HAL_GPIO_Init+0x2a8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d869      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bf6:	4a94      	ldr	r2, [pc, #592]	@ (8000e48 <HAL_GPIO_Init+0x2ac>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d04c      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bfc:	4a92      	ldr	r2, [pc, #584]	@ (8000e48 <HAL_GPIO_Init+0x2ac>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d863      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c02:	4a92      	ldr	r2, [pc, #584]	@ (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d046      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000c08:	4a90      	ldr	r2, [pc, #576]	@ (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d85d      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c0e:	2b12      	cmp	r3, #18
 8000c10:	d82a      	bhi.n	8000c68 <HAL_GPIO_Init+0xcc>
 8000c12:	2b12      	cmp	r3, #18
 8000c14:	d859      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c16:	a201      	add	r2, pc, #4	@ (adr r2, 8000c1c <HAL_GPIO_Init+0x80>)
 8000c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1c:	08000c97 	.word	0x08000c97
 8000c20:	08000c71 	.word	0x08000c71
 8000c24:	08000c83 	.word	0x08000c83
 8000c28:	08000cc5 	.word	0x08000cc5
 8000c2c:	08000ccb 	.word	0x08000ccb
 8000c30:	08000ccb 	.word	0x08000ccb
 8000c34:	08000ccb 	.word	0x08000ccb
 8000c38:	08000ccb 	.word	0x08000ccb
 8000c3c:	08000ccb 	.word	0x08000ccb
 8000c40:	08000ccb 	.word	0x08000ccb
 8000c44:	08000ccb 	.word	0x08000ccb
 8000c48:	08000ccb 	.word	0x08000ccb
 8000c4c:	08000ccb 	.word	0x08000ccb
 8000c50:	08000ccb 	.word	0x08000ccb
 8000c54:	08000ccb 	.word	0x08000ccb
 8000c58:	08000ccb 	.word	0x08000ccb
 8000c5c:	08000ccb 	.word	0x08000ccb
 8000c60:	08000c79 	.word	0x08000c79
 8000c64:	08000c8d 	.word	0x08000c8d
 8000c68:	4a79      	ldr	r2, [pc, #484]	@ (8000e50 <HAL_GPIO_Init+0x2b4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6e:	e02c      	b.n	8000cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e029      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e024      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	3308      	adds	r3, #8
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e01f      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	330c      	adds	r3, #12
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e01a      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e013      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d105      	bne.n	8000cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	611a      	str	r2, [r3, #16]
          break;
 8000cb6:	e009      	b.n	8000ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	615a      	str	r2, [r3, #20]
          break;
 8000cc2:	e003      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e000      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          break;
 8000cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2bff      	cmp	r3, #255	@ 0xff
 8000cd0:	d801      	bhi.n	8000cd6 <HAL_GPIO_Init+0x13a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	e001      	b.n	8000cda <HAL_GPIO_Init+0x13e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2bff      	cmp	r3, #255	@ 0xff
 8000ce0:	d802      	bhi.n	8000ce8 <HAL_GPIO_Init+0x14c>
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	e002      	b.n	8000cee <HAL_GPIO_Init+0x152>
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cea:	3b08      	subs	r3, #8
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	6a39      	ldr	r1, [r7, #32]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 80b1 	beq.w	8000e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e54 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a4c      	ldr	r2, [pc, #304]	@ (8000e54 <HAL_GPIO_Init+0x2b8>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b4a      	ldr	r3, [pc, #296]	@ (8000e54 <HAL_GPIO_Init+0x2b8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d34:	4a48      	ldr	r2, [pc, #288]	@ (8000e58 <HAL_GPIO_Init+0x2bc>)
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a40      	ldr	r2, [pc, #256]	@ (8000e5c <HAL_GPIO_Init+0x2c0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d013      	beq.n	8000d88 <HAL_GPIO_Init+0x1ec>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a3f      	ldr	r2, [pc, #252]	@ (8000e60 <HAL_GPIO_Init+0x2c4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d00d      	beq.n	8000d84 <HAL_GPIO_Init+0x1e8>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e64 <HAL_GPIO_Init+0x2c8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x1e4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a3d      	ldr	r2, [pc, #244]	@ (8000e68 <HAL_GPIO_Init+0x2cc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d101      	bne.n	8000d7c <HAL_GPIO_Init+0x1e0>
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	e004      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d8c:	f002 0203 	and.w	r2, r2, #3
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	4093      	lsls	r3, r2
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d9a:	492f      	ldr	r1, [pc, #188]	@ (8000e58 <HAL_GPIO_Init+0x2bc>)
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	492c      	ldr	r1, [pc, #176]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	608b      	str	r3, [r1, #8]
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4928      	ldr	r1, [pc, #160]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	4922      	ldr	r1, [pc, #136]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	60cb      	str	r3, [r1, #12]
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dea:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	491e      	ldr	r1, [pc, #120]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d006      	beq.n	8000e12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e04:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4918      	ldr	r1, [pc, #96]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	604b      	str	r3, [r1, #4]
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e12:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4914      	ldr	r1, [pc, #80]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d021      	beq.n	8000e70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	490e      	ldr	r1, [pc, #56]	@ (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
 8000e38:	e021      	b.n	8000e7e <HAL_GPIO_Init+0x2e2>
 8000e3a:	bf00      	nop
 8000e3c:	10320000 	.word	0x10320000
 8000e40:	10310000 	.word	0x10310000
 8000e44:	10220000 	.word	0x10220000
 8000e48:	10210000 	.word	0x10210000
 8000e4c:	10120000 	.word	0x10120000
 8000e50:	10110000 	.word	0x10110000
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40011400 	.word	0x40011400
 8000e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4909      	ldr	r1, [pc, #36]	@ (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e80:	3301      	adds	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f47f ae8e 	bne.w	8000bb0 <HAL_GPIO_Init+0x14>
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	372c      	adds	r7, #44	@ 0x2c
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	40010400 	.word	0x40010400

08000ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e12b      	b.n	800110e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d106      	bne.n	8000ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fbe4 	bl	8000698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2224      	movs	r2, #36	@ 0x24
 8000ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f08:	f001 f98c 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8000f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	4a81      	ldr	r2, [pc, #516]	@ (8001118 <HAL_I2C_Init+0x274>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d807      	bhi.n	8000f28 <HAL_I2C_Init+0x84>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4a80      	ldr	r2, [pc, #512]	@ (800111c <HAL_I2C_Init+0x278>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	bf94      	ite	ls
 8000f20:	2301      	movls	r3, #1
 8000f22:	2300      	movhi	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	e006      	b.n	8000f36 <HAL_I2C_Init+0x92>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8001120 <HAL_I2C_Init+0x27c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	bf94      	ite	ls
 8000f30:	2301      	movls	r3, #1
 8000f32:	2300      	movhi	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0e7      	b.n	800110e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4a78      	ldr	r2, [pc, #480]	@ (8001124 <HAL_I2C_Init+0x280>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9b      	lsrs	r3, r3, #18
 8000f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8001118 <HAL_I2C_Init+0x274>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d802      	bhi.n	8000f78 <HAL_I2C_Init+0xd4>
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3301      	adds	r3, #1
 8000f76:	e009      	b.n	8000f8c <HAL_I2C_Init+0xe8>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	4a69      	ldr	r2, [pc, #420]	@ (8001128 <HAL_I2C_Init+0x284>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	099b      	lsrs	r3, r3, #6
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	430b      	orrs	r3, r1
 8000f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	495c      	ldr	r1, [pc, #368]	@ (8001118 <HAL_I2C_Init+0x274>)
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d819      	bhi.n	8000fe0 <HAL_I2C_Init+0x13c>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	1e59      	subs	r1, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fba:	1c59      	adds	r1, r3, #1
 8000fbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000fc0:	400b      	ands	r3, r1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00a      	beq.n	8000fdc <HAL_I2C_Init+0x138>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1e59      	subs	r1, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fda:	e051      	b.n	8001080 <HAL_I2C_Init+0x1dc>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e04f      	b.n	8001080 <HAL_I2C_Init+0x1dc>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d111      	bne.n	800100c <HAL_I2C_Init+0x168>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	1e58      	subs	r0, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6859      	ldr	r1, [r3, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	440b      	add	r3, r1
 8000ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf0c      	ite	eq
 8001004:	2301      	moveq	r3, #1
 8001006:	2300      	movne	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	e012      	b.n	8001032 <HAL_I2C_Init+0x18e>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1e58      	subs	r0, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6859      	ldr	r1, [r3, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	0099      	lsls	r1, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001022:	3301      	adds	r3, #1
 8001024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf0c      	ite	eq
 800102c:	2301      	moveq	r3, #1
 800102e:	2300      	movne	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_I2C_Init+0x196>
 8001036:	2301      	movs	r3, #1
 8001038:	e022      	b.n	8001080 <HAL_I2C_Init+0x1dc>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10e      	bne.n	8001060 <HAL_I2C_Init+0x1bc>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	1e58      	subs	r0, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6859      	ldr	r1, [r3, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	440b      	add	r3, r1
 8001050:	fbb0 f3f3 	udiv	r3, r0, r3
 8001054:	3301      	adds	r3, #1
 8001056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800105e:	e00f      	b.n	8001080 <HAL_I2C_Init+0x1dc>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1e58      	subs	r0, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	0099      	lsls	r1, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	fbb0 f3f3 	udiv	r3, r0, r3
 8001076:	3301      	adds	r3, #1
 8001078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	6809      	ldr	r1, [r1, #0]
 8001084:	4313      	orrs	r3, r2
 8001086:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69da      	ldr	r2, [r3, #28]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80010ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6911      	ldr	r1, [r2, #16]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68d2      	ldr	r2, [r2, #12]
 80010ba:	4311      	orrs	r1, r2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2220      	movs	r2, #32
 80010fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	000186a0 	.word	0x000186a0
 800111c:	001e847f 	.word	0x001e847f
 8001120:	003d08ff 	.word	0x003d08ff
 8001124:	431bde83 	.word	0x431bde83
 8001128:	10624dd3 	.word	0x10624dd3

0800112c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af02      	add	r7, sp, #8
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	461a      	mov	r2, r3
 8001138:	460b      	mov	r3, r1
 800113a:	817b      	strh	r3, [r7, #10]
 800113c:	4613      	mov	r3, r2
 800113e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff fc18 	bl	8000978 <HAL_GetTick>
 8001148:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b20      	cmp	r3, #32
 8001154:	f040 824b 	bne.w	80015ee <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2319      	movs	r3, #25
 800115e:	2201      	movs	r2, #1
 8001160:	497f      	ldr	r1, [pc, #508]	@ (8001360 <HAL_I2C_Master_Receive+0x234>)
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 fb1c 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800116e:	2302      	movs	r3, #2
 8001170:	e23e      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_I2C_Master_Receive+0x54>
 800117c:	2302      	movs	r3, #2
 800117e:	e237      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b01      	cmp	r3, #1
 8001194:	d007      	beq.n	80011a6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0201 	orr.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2222      	movs	r2, #34	@ 0x22
 80011ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2210      	movs	r2, #16
 80011c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	893a      	ldrh	r2, [r7, #8]
 80011d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011dc:	b29a      	uxth	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001364 <HAL_I2C_Master_Receive+0x238>)
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011e8:	8979      	ldrh	r1, [r7, #10]
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa08 	bl	8001604 <I2C_MasterRequestRead>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e1f8      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001202:	2b00      	cmp	r3, #0
 8001204:	d113      	bne.n	800122e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e1cc      	b.n	80015c8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001232:	2b01      	cmp	r3, #1
 8001234:	d11e      	bne.n	8001274 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001244:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001246:	b672      	cpsid	i
}
 8001248:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800126e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001270:	b662      	cpsie	i
}
 8001272:	e035      	b.n	80012e0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001278:	2b02      	cmp	r3, #2
 800127a:	d11e      	bne.n	80012ba <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800128a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012b6:	b662      	cpsie	i
}
 80012b8:	e012      	b.n	80012e0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80012e0:	e172      	b.n	80015c8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	f200 811f 	bhi.w	800152a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d123      	bne.n	800133c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 fb6b 	bl	80019d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e173      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001324:	3b01      	subs	r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800133a:	e145      	b.n	80015c8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001340:	2b02      	cmp	r3, #2
 8001342:	d152      	bne.n	80013ea <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134a:	2200      	movs	r2, #0
 800134c:	4906      	ldr	r1, [pc, #24]	@ (8001368 <HAL_I2C_Master_Receive+0x23c>)
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 fa26 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d008      	beq.n	800136c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e148      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
 800135e:	bf00      	nop
 8001360:	00100002 	.word	0x00100002
 8001364:	ffff0000 	.word	0xffff0000
 8001368:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800137e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800139c:	3b01      	subs	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80013b2:	b662      	cpsie	i
}
 80013b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3b01      	subs	r3, #1
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80013e8:	e0ee      	b.n	80015c8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f0:	2200      	movs	r2, #0
 80013f2:	4981      	ldr	r1, [pc, #516]	@ (80015f8 <HAL_I2C_Master_Receive+0x4cc>)
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 f9d3 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0f5      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001412:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001434:	3b01      	subs	r3, #1
 8001436:	b29a      	uxth	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800144a:	4b6c      	ldr	r3, [pc, #432]	@ (80015fc <HAL_I2C_Master_Receive+0x4d0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	4a6b      	ldr	r2, [pc, #428]	@ (8001600 <HAL_I2C_Master_Receive+0x4d4>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0a1a      	lsrs	r2, r3, #8
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	00da      	lsls	r2, r3, #3
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	3b01      	subs	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d118      	bne.n	80014a2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2220      	movs	r2, #32
 800147a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f043 0220 	orr.w	r2, r3, #32
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001492:	b662      	cpsie	i
}
 8001494:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0a6      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d1d9      	bne.n	8001464 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80014f2:	b662      	cpsie	i
}
 80014f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001512:	3b01      	subs	r3, #1
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001528:	e04e      	b.n	80015c8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800152a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 fa50 	bl	80019d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e058      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b04      	cmp	r3, #4
 800157c:	d124      	bne.n	80015c8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001582:	2b03      	cmp	r3, #3
 8001584:	d107      	bne.n	8001596 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001594:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015be:	b29b      	uxth	r3, r3
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f47f ae88 	bne.w	80012e2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80015ee:	2302      	movs	r3, #2
  }
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3728      	adds	r7, #40	@ 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	00010004 	.word	0x00010004
 80015fc:	20000000 	.word	0x20000000
 8001600:	14f8b589 	.word	0x14f8b589

08001604 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	460b      	mov	r3, r1
 8001612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001618:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001628:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d006      	beq.n	800163e <I2C_MasterRequestRead+0x3a>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d003      	beq.n	800163e <I2C_MasterRequestRead+0x3a>
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800163c:	d108      	bne.n	8001650 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e00b      	b.n	8001668 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	2b11      	cmp	r3, #17
 8001656:	d107      	bne.n	8001668 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 f893 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00d      	beq.n	800169c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800168e:	d103      	bne.n	8001698 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001696:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e079      	b.n	8001790 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016a4:	d108      	bne.n	80016b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80016a6:	897b      	ldrh	r3, [r7, #10]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	e05f      	b.n	8001778 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016b8:	897b      	ldrh	r3, [r7, #10]
 80016ba:	11db      	asrs	r3, r3, #7
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f003 0306 	and.w	r3, r3, #6
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f063 030f 	orn	r3, r3, #15
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4930      	ldr	r1, [pc, #192]	@ (8001798 <I2C_MasterRequestRead+0x194>)
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f8dc 	bl	8001894 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e054      	b.n	8001790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016e6:	897b      	ldrh	r3, [r7, #10]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4929      	ldr	r1, [pc, #164]	@ (800179c <I2C_MasterRequestRead+0x198>)
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f8cc 	bl	8001894 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e044      	b.n	8001790 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800172a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f831 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001752:	d103      	bne.n	800175c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800175a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e017      	b.n	8001790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001760:	897b      	ldrh	r3, [r7, #10]
 8001762:	11db      	asrs	r3, r3, #7
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0306 	and.w	r3, r3, #6
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f063 030e 	orn	r3, r3, #14
 8001770:	b2da      	uxtb	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4907      	ldr	r1, [pc, #28]	@ (800179c <I2C_MasterRequestRead+0x198>)
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f888 	bl	8001894 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	00010008 	.word	0x00010008
 800179c:	00010002 	.word	0x00010002

080017a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b0:	e048      	b.n	8001844 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d044      	beq.n	8001844 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ba:	f7ff f8dd 	bl	8000978 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d302      	bcc.n	80017d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d139      	bne.n	8001844 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10d      	bne.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	43da      	mvns	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4013      	ands	r3, r2
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	e00c      	b.n	8001810 <I2C_WaitOnFlagUntilTimeout+0x70>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	43da      	mvns	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4013      	ands	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	429a      	cmp	r2, r3
 8001814:	d116      	bne.n	8001844 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f043 0220 	orr.w	r2, r3, #32
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e023      	b.n	800188c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	0c1b      	lsrs	r3, r3, #16
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d10d      	bne.n	800186a <I2C_WaitOnFlagUntilTimeout+0xca>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	43da      	mvns	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4013      	ands	r3, r2
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf0c      	ite	eq
 8001860:	2301      	moveq	r3, #1
 8001862:	2300      	movne	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	e00c      	b.n	8001884 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	43da      	mvns	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	4013      	ands	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	429a      	cmp	r2, r3
 8001888:	d093      	beq.n	80017b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018a2:	e071      	b.n	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b2:	d123      	bne.n	80018fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80018cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f043 0204 	orr.w	r2, r3, #4
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e067      	b.n	80019cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001902:	d041      	beq.n	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001904:	f7ff f838 	bl	8000978 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	d302      	bcc.n	800191a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d136      	bne.n	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10c      	bne.n	800193e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4013      	ands	r3, r2
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	e00b      	b.n	8001956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	43da      	mvns	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	4013      	ands	r3, r2
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d016      	beq.n	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e021      	b.n	80019cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d10c      	bne.n	80019ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	43da      	mvns	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4013      	ands	r3, r2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e00b      	b.n	80019c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4013      	ands	r3, r2
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bf14      	ite	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	2300      	moveq	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f47f af6d 	bne.w	80018a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019e0:	e049      	b.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d119      	bne.n	8001a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0210 	mvn.w	r2, #16
 80019f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e030      	b.n	8001a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a24:	f7fe ffa8 	bl	8000978 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d302      	bcc.n	8001a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11d      	bne.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a44:	2b40      	cmp	r3, #64	@ 0x40
 8001a46:	d016      	beq.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2220      	movs	r2, #32
 8001a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f043 0220 	orr.w	r2, r3, #32
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e007      	b.n	8001a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a80:	2b40      	cmp	r3, #64	@ 0x40
 8001a82:	d1ae      	bne.n	80019e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e272      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab0:	4b92      	ldr	r3, [pc, #584]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d00c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001abc:	4b8f      	ldr	r3, [pc, #572]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
 8001ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	4b89      	ldr	r3, [pc, #548]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d06c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x12c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d168      	bne.n	8001bbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e24c      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x76>
 8001af8:	4b80      	ldr	r3, [pc, #512]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a7f      	ldr	r2, [pc, #508]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e02e      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x98>
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7a      	ldr	r2, [pc, #488]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b78      	ldr	r3, [pc, #480]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a77      	ldr	r2, [pc, #476]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0xbc>
 8001b32:	4b72      	ldr	r3, [pc, #456]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a71      	ldr	r2, [pc, #452]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6e      	ldr	r2, [pc, #440]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6a      	ldr	r2, [pc, #424]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b68      	ldr	r3, [pc, #416]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a67      	ldr	r2, [pc, #412]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7fe ff04 	bl	8000978 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7fe ff00 	bl	8000978 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e200      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xe4>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7fe fef0 	bl	8000978 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7fe feec 	bl	8000978 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1ec      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x10c>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d063      	beq.n	8001c92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bca:	4b4c      	ldr	r3, [pc, #304]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bd6:	4b49      	ldr	r3, [pc, #292]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d11c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x18c>
 8001be2:	4b46      	ldr	r3, [pc, #280]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e1c0      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4939      	ldr	r1, [pc, #228]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	e03a      	b.n	8001c92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b36      	ldr	r3, [pc, #216]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7fe fea5 	bl	8000978 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c32:	f7fe fea1 	bl	8000978 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1a1      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4927      	ldr	r1, [pc, #156]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
 8001c64:	e015      	b.n	8001c92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe fe84 	bl	8000978 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c74:	f7fe fe80 	bl	8000978 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e180      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d03a      	beq.n	8001d14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d019      	beq.n	8001cda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7fe fe64 	bl	8000978 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7fe fe60 	bl	8000978 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e160      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 face 	bl	8002274 <RCC_Delay>
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7fe fe4a 	bl	8000978 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce6:	e00f      	b.n	8001d08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7fe fe46 	bl	8000978 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d908      	bls.n	8001d08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e146      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	42420000 	.word	0x42420000
 8001d04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b92      	ldr	r3, [pc, #584]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e9      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a6 	beq.w	8001e6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b8b      	ldr	r3, [pc, #556]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b88      	ldr	r3, [pc, #544]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a87      	ldr	r2, [pc, #540]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]
 8001d3e:	4b85      	ldr	r3, [pc, #532]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b82      	ldr	r3, [pc, #520]	@ (8001f58 <HAL_RCC_OscConfig+0x4c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d118      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f58 <HAL_RCC_OscConfig+0x4c8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f58 <HAL_RCC_OscConfig+0x4c8>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7fe fe07 	bl	8000978 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6e:	f7fe fe03 	bl	8000978 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	@ 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e103      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b75      	ldr	r3, [pc, #468]	@ (8001f58 <HAL_RCC_OscConfig+0x4c8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x312>
 8001d94:	4b6f      	ldr	r3, [pc, #444]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a6e      	ldr	r2, [pc, #440]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	e02d      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x334>
 8001daa:	4b6a      	ldr	r3, [pc, #424]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a69      	ldr	r2, [pc, #420]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	4b67      	ldr	r3, [pc, #412]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a66      	ldr	r2, [pc, #408]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	e01c      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x356>
 8001dcc:	4b61      	ldr	r3, [pc, #388]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a60      	ldr	r2, [pc, #384]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001de6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a5a      	ldr	r2, [pc, #360]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b58      	ldr	r3, [pc, #352]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d015      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe fdb7 	bl	8000978 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe fdb3 	bl	8000978 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0b1      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	4b4b      	ldr	r3, [pc, #300]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ee      	beq.n	8001e0e <HAL_RCC_OscConfig+0x37e>
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7fe fda1 	bl	8000978 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7fe fd9d 	bl	8000978 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e09b      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	4b40      	ldr	r3, [pc, #256]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ee      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e62:	4b3c      	ldr	r3, [pc, #240]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4a3b      	ldr	r2, [pc, #236]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e78:	4b36      	ldr	r3, [pc, #216]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d061      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d146      	bne.n	8001f1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b33      	ldr	r3, [pc, #204]	@ (8001f5c <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe fd71 	bl	8000978 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7fe fd6d 	bl	8000978 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e06d      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec0:	d108      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ec2:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4921      	ldr	r1, [pc, #132]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a19      	ldr	r1, [r3, #32]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	491b      	ldr	r1, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fd41 	bl	8000978 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe fd3d 	bl	8000978 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e03d      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x46a>
 8001f18:	e035      	b.n	8001f86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <HAL_RCC_OscConfig+0x4cc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fd2a 	bl	8000978 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe fd26 	bl	8000978 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e026      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x498>
 8001f46:	e01e      	b.n	8001f86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e019      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_OscConfig+0x500>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000

08001f94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0d0      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d910      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b67      	ldr	r3, [pc, #412]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4965      	ldr	r1, [pc, #404]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b63      	ldr	r3, [pc, #396]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b8      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff0:	4b59      	ldr	r3, [pc, #356]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a58      	ldr	r2, [pc, #352]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ffa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002008:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a52      	ldr	r2, [pc, #328]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002012:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	494d      	ldr	r1, [pc, #308]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d040      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d115      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e07f      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002052:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e073      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	4b3d      	ldr	r3, [pc, #244]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002072:	4b39      	ldr	r3, [pc, #228]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f023 0203 	bic.w	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4936      	ldr	r1, [pc, #216]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002084:	f7fe fc78 	bl	8000978 <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f7fe fc74 	bl	8000978 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e053      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 020c 	and.w	r2, r3, #12
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1eb      	bne.n	800208c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d210      	bcs.n	80020e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4922      	ldr	r1, [pc, #136]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e032      	b.n	800214a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f0:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4916      	ldr	r1, [pc, #88]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210e:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	490e      	ldr	r1, [pc, #56]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002122:	f000 f821 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002126:	4602      	mov	r2, r0
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	490a      	ldr	r1, [pc, #40]	@ (800215c <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	5ccb      	ldrb	r3, [r1, r3]
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1cc>)
 800213c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_RCC_ClockConfig+0x1d0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fbd6 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	08003034 	.word	0x08003034
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b04      	cmp	r3, #4
 8002190:	d002      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x30>
 8002192:	2b08      	cmp	r3, #8
 8002194:	d003      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x36>
 8002196:	e027      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002198:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	e027      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	0c9b      	lsrs	r3, r3, #18
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	4a17      	ldr	r2, [pc, #92]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d010      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x94>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0c5b      	lsrs	r3, r3, #17
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ca:	fb03 f202 	mul.w	r2, r3, r2
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e004      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <HAL_RCC_GetSysClockFreq+0xa4>)
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	613b      	str	r3, [r7, #16]
      break;
 80021e6:	e002      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ea:	613b      	str	r3, [r7, #16]
      break;
 80021ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ee:	693b      	ldr	r3, [r7, #16]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	007a1200 	.word	0x007a1200
 8002204:	0800304c 	.word	0x0800304c
 8002208:	0800305c 	.word	0x0800305c
 800220c:	003d0900 	.word	0x003d0900

08002210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002214:	4b02      	ldr	r3, [pc, #8]	@ (8002220 <HAL_RCC_GetHCLKFreq+0x10>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002228:	f7ff fff2 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	@ (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	08003044 	.word	0x08003044

0800224c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002250:	f7ff ffde 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	@ (8002270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	08003044 	.word	0x08003044

08002274 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800227c:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <RCC_Delay+0x34>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <RCC_Delay+0x38>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0a5b      	lsrs	r3, r3, #9
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002290:	bf00      	nop
  }
  while (Delay --);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	60fa      	str	r2, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f9      	bne.n	8002290 <RCC_Delay+0x1c>
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000000 	.word	0x20000000
 80022ac:	10624dd3 	.word	0x10624dd3

080022b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e042      	b.n	8002348 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fa1c 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	@ 0x24
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f91d 	bl	8002534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b20      	cmp	r3, #32
 800236e:	d16d      	bne.n	800244c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_UART_Transmit+0x2c>
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e066      	b.n	800244e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2221      	movs	r2, #33	@ 0x21
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238e:	f7fe faf3 	bl	8000978 <HAL_GetTick>
 8002392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	88fa      	ldrh	r2, [r7, #6]
 8002398:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	88fa      	ldrh	r2, [r7, #6]
 800239e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a8:	d108      	bne.n	80023bc <HAL_UART_Transmit+0x6c>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d104      	bne.n	80023bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	e003      	b.n	80023c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023c4:	e02a      	b.n	800241c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2180      	movs	r1, #128	@ 0x80
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f840 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e036      	b.n	800244e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10b      	bne.n	80023fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3302      	adds	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e007      	b.n	800240e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3301      	adds	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1cf      	bne.n	80023c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	2140      	movs	r1, #64	@ 0x40
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f810 	bl	8002456 <UART_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b090      	sub	sp, #64	@ 0x40
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002466:	e050      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246e:	d04c      	beq.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
 8002476:	f7fe fa7f 	bl	8000978 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002482:	429a      	cmp	r2, r3
 8002484:	d241      	bcs.n	800250a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800249c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	330c      	adds	r3, #12
 80024a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80024b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e5      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	613b      	str	r3, [r7, #16]
   return(result);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3314      	adds	r3, #20
 80024d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024da:	623a      	str	r2, [r7, #32]
 80024dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024de:	69f9      	ldr	r1, [r7, #28]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e5      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e00f      	b.n	800252a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	429a      	cmp	r2, r3
 8002526:	d09f      	beq.n	8002468 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3740      	adds	r7, #64	@ 0x40
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800256e:	f023 030c 	bic.w	r3, r3, #12
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	430b      	orrs	r3, r1
 800257a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2c      	ldr	r2, [pc, #176]	@ (8002648 <UART_SetConfig+0x114>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d103      	bne.n	80025a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800259c:	f7ff fe56 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	e002      	b.n	80025aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025a4:	f7ff fe3e 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 80025a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009a      	lsls	r2, r3, #2
 80025b4:	441a      	add	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	4a22      	ldr	r2, [pc, #136]	@ (800264c <UART_SetConfig+0x118>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	0119      	lsls	r1, r3, #4
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009a      	lsls	r2, r3, #2
 80025d4:	441a      	add	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <UART_SetConfig+0x118>)
 80025e2:	fba3 0302 	umull	r0, r3, r3, r2
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2064      	movs	r0, #100	@ 0x64
 80025ea:	fb00 f303 	mul.w	r3, r0, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	3332      	adds	r3, #50	@ 0x32
 80025f4:	4a15      	ldr	r2, [pc, #84]	@ (800264c <UART_SetConfig+0x118>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002600:	4419      	add	r1, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fbb2 f2f3 	udiv	r2, r2, r3
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <UART_SetConfig+0x118>)
 800261a:	fba3 0302 	umull	r0, r3, r3, r2
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2064      	movs	r0, #100	@ 0x64
 8002622:	fb00 f303 	mul.w	r3, r0, r3
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	3332      	adds	r3, #50	@ 0x32
 800262c:	4a07      	ldr	r2, [pc, #28]	@ (800264c <UART_SetConfig+0x118>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	f003 020f 	and.w	r2, r3, #15
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	440a      	add	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40013800 	.word	0x40013800
 800264c:	51eb851f 	.word	0x51eb851f

08002650 <siprintf>:
 8002650:	b40e      	push	{r1, r2, r3}
 8002652:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002656:	b500      	push	{lr}
 8002658:	b09c      	sub	sp, #112	@ 0x70
 800265a:	ab1d      	add	r3, sp, #116	@ 0x74
 800265c:	9002      	str	r0, [sp, #8]
 800265e:	9006      	str	r0, [sp, #24]
 8002660:	9107      	str	r1, [sp, #28]
 8002662:	9104      	str	r1, [sp, #16]
 8002664:	4808      	ldr	r0, [pc, #32]	@ (8002688 <siprintf+0x38>)
 8002666:	4909      	ldr	r1, [pc, #36]	@ (800268c <siprintf+0x3c>)
 8002668:	f853 2b04 	ldr.w	r2, [r3], #4
 800266c:	9105      	str	r1, [sp, #20]
 800266e:	6800      	ldr	r0, [r0, #0]
 8002670:	a902      	add	r1, sp, #8
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	f000 f992 	bl	800299c <_svfiprintf_r>
 8002678:	2200      	movs	r2, #0
 800267a:	9b02      	ldr	r3, [sp, #8]
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	b01c      	add	sp, #112	@ 0x70
 8002680:	f85d eb04 	ldr.w	lr, [sp], #4
 8002684:	b003      	add	sp, #12
 8002686:	4770      	bx	lr
 8002688:	2000000c 	.word	0x2000000c
 800268c:	ffff0208 	.word	0xffff0208

08002690 <memset>:
 8002690:	4603      	mov	r3, r0
 8002692:	4402      	add	r2, r0
 8002694:	4293      	cmp	r3, r2
 8002696:	d100      	bne.n	800269a <memset+0xa>
 8002698:	4770      	bx	lr
 800269a:	f803 1b01 	strb.w	r1, [r3], #1
 800269e:	e7f9      	b.n	8002694 <memset+0x4>

080026a0 <__errno>:
 80026a0:	4b01      	ldr	r3, [pc, #4]	@ (80026a8 <__errno+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	2000000c 	.word	0x2000000c

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	2600      	movs	r6, #0
 80026b0:	4d0c      	ldr	r5, [pc, #48]	@ (80026e4 <__libc_init_array+0x38>)
 80026b2:	4c0d      	ldr	r4, [pc, #52]	@ (80026e8 <__libc_init_array+0x3c>)
 80026b4:	1b64      	subs	r4, r4, r5
 80026b6:	10a4      	asrs	r4, r4, #2
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	f000 fc78 	bl	8002fb0 <_init>
 80026c0:	2600      	movs	r6, #0
 80026c2:	4d0a      	ldr	r5, [pc, #40]	@ (80026ec <__libc_init_array+0x40>)
 80026c4:	4c0a      	ldr	r4, [pc, #40]	@ (80026f0 <__libc_init_array+0x44>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	f855 3b04 	ldr.w	r3, [r5], #4
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	0800309c 	.word	0x0800309c
 80026e8:	0800309c 	.word	0x0800309c
 80026ec:	0800309c 	.word	0x0800309c
 80026f0:	080030a0 	.word	0x080030a0

080026f4 <__retarget_lock_acquire_recursive>:
 80026f4:	4770      	bx	lr

080026f6 <__retarget_lock_release_recursive>:
 80026f6:	4770      	bx	lr

080026f8 <_free_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	4605      	mov	r5, r0
 80026fc:	2900      	cmp	r1, #0
 80026fe:	d040      	beq.n	8002782 <_free_r+0x8a>
 8002700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002704:	1f0c      	subs	r4, r1, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	bfb8      	it	lt
 800270a:	18e4      	addlt	r4, r4, r3
 800270c:	f000 f8de 	bl	80028cc <__malloc_lock>
 8002710:	4a1c      	ldr	r2, [pc, #112]	@ (8002784 <_free_r+0x8c>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	b933      	cbnz	r3, 8002724 <_free_r+0x2c>
 8002716:	6063      	str	r3, [r4, #4]
 8002718:	6014      	str	r4, [r2, #0]
 800271a:	4628      	mov	r0, r5
 800271c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002720:	f000 b8da 	b.w	80028d8 <__malloc_unlock>
 8002724:	42a3      	cmp	r3, r4
 8002726:	d908      	bls.n	800273a <_free_r+0x42>
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	1821      	adds	r1, r4, r0
 800272c:	428b      	cmp	r3, r1
 800272e:	bf01      	itttt	eq
 8002730:	6819      	ldreq	r1, [r3, #0]
 8002732:	685b      	ldreq	r3, [r3, #4]
 8002734:	1809      	addeq	r1, r1, r0
 8002736:	6021      	streq	r1, [r4, #0]
 8002738:	e7ed      	b.n	8002716 <_free_r+0x1e>
 800273a:	461a      	mov	r2, r3
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	b10b      	cbz	r3, 8002744 <_free_r+0x4c>
 8002740:	42a3      	cmp	r3, r4
 8002742:	d9fa      	bls.n	800273a <_free_r+0x42>
 8002744:	6811      	ldr	r1, [r2, #0]
 8002746:	1850      	adds	r0, r2, r1
 8002748:	42a0      	cmp	r0, r4
 800274a:	d10b      	bne.n	8002764 <_free_r+0x6c>
 800274c:	6820      	ldr	r0, [r4, #0]
 800274e:	4401      	add	r1, r0
 8002750:	1850      	adds	r0, r2, r1
 8002752:	4283      	cmp	r3, r0
 8002754:	6011      	str	r1, [r2, #0]
 8002756:	d1e0      	bne.n	800271a <_free_r+0x22>
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4408      	add	r0, r1
 800275e:	6010      	str	r0, [r2, #0]
 8002760:	6053      	str	r3, [r2, #4]
 8002762:	e7da      	b.n	800271a <_free_r+0x22>
 8002764:	d902      	bls.n	800276c <_free_r+0x74>
 8002766:	230c      	movs	r3, #12
 8002768:	602b      	str	r3, [r5, #0]
 800276a:	e7d6      	b.n	800271a <_free_r+0x22>
 800276c:	6820      	ldr	r0, [r4, #0]
 800276e:	1821      	adds	r1, r4, r0
 8002770:	428b      	cmp	r3, r1
 8002772:	bf01      	itttt	eq
 8002774:	6819      	ldreq	r1, [r3, #0]
 8002776:	685b      	ldreq	r3, [r3, #4]
 8002778:	1809      	addeq	r1, r1, r0
 800277a:	6021      	streq	r1, [r4, #0]
 800277c:	6063      	str	r3, [r4, #4]
 800277e:	6054      	str	r4, [r2, #4]
 8002780:	e7cb      	b.n	800271a <_free_r+0x22>
 8002782:	bd38      	pop	{r3, r4, r5, pc}
 8002784:	200002a4 	.word	0x200002a4

08002788 <sbrk_aligned>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	4e0f      	ldr	r6, [pc, #60]	@ (80027c8 <sbrk_aligned+0x40>)
 800278c:	460c      	mov	r4, r1
 800278e:	6831      	ldr	r1, [r6, #0]
 8002790:	4605      	mov	r5, r0
 8002792:	b911      	cbnz	r1, 800279a <sbrk_aligned+0x12>
 8002794:	f000 fbaa 	bl	8002eec <_sbrk_r>
 8002798:	6030      	str	r0, [r6, #0]
 800279a:	4621      	mov	r1, r4
 800279c:	4628      	mov	r0, r5
 800279e:	f000 fba5 	bl	8002eec <_sbrk_r>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	d103      	bne.n	80027ae <sbrk_aligned+0x26>
 80027a6:	f04f 34ff 	mov.w	r4, #4294967295
 80027aa:	4620      	mov	r0, r4
 80027ac:	bd70      	pop	{r4, r5, r6, pc}
 80027ae:	1cc4      	adds	r4, r0, #3
 80027b0:	f024 0403 	bic.w	r4, r4, #3
 80027b4:	42a0      	cmp	r0, r4
 80027b6:	d0f8      	beq.n	80027aa <sbrk_aligned+0x22>
 80027b8:	1a21      	subs	r1, r4, r0
 80027ba:	4628      	mov	r0, r5
 80027bc:	f000 fb96 	bl	8002eec <_sbrk_r>
 80027c0:	3001      	adds	r0, #1
 80027c2:	d1f2      	bne.n	80027aa <sbrk_aligned+0x22>
 80027c4:	e7ef      	b.n	80027a6 <sbrk_aligned+0x1e>
 80027c6:	bf00      	nop
 80027c8:	200002a0 	.word	0x200002a0

080027cc <_malloc_r>:
 80027cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027d0:	1ccd      	adds	r5, r1, #3
 80027d2:	f025 0503 	bic.w	r5, r5, #3
 80027d6:	3508      	adds	r5, #8
 80027d8:	2d0c      	cmp	r5, #12
 80027da:	bf38      	it	cc
 80027dc:	250c      	movcc	r5, #12
 80027de:	2d00      	cmp	r5, #0
 80027e0:	4606      	mov	r6, r0
 80027e2:	db01      	blt.n	80027e8 <_malloc_r+0x1c>
 80027e4:	42a9      	cmp	r1, r5
 80027e6:	d904      	bls.n	80027f2 <_malloc_r+0x26>
 80027e8:	230c      	movs	r3, #12
 80027ea:	6033      	str	r3, [r6, #0]
 80027ec:	2000      	movs	r0, #0
 80027ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028c8 <_malloc_r+0xfc>
 80027f6:	f000 f869 	bl	80028cc <__malloc_lock>
 80027fa:	f8d8 3000 	ldr.w	r3, [r8]
 80027fe:	461c      	mov	r4, r3
 8002800:	bb44      	cbnz	r4, 8002854 <_malloc_r+0x88>
 8002802:	4629      	mov	r1, r5
 8002804:	4630      	mov	r0, r6
 8002806:	f7ff ffbf 	bl	8002788 <sbrk_aligned>
 800280a:	1c43      	adds	r3, r0, #1
 800280c:	4604      	mov	r4, r0
 800280e:	d158      	bne.n	80028c2 <_malloc_r+0xf6>
 8002810:	f8d8 4000 	ldr.w	r4, [r8]
 8002814:	4627      	mov	r7, r4
 8002816:	2f00      	cmp	r7, #0
 8002818:	d143      	bne.n	80028a2 <_malloc_r+0xd6>
 800281a:	2c00      	cmp	r4, #0
 800281c:	d04b      	beq.n	80028b6 <_malloc_r+0xea>
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	4639      	mov	r1, r7
 8002822:	4630      	mov	r0, r6
 8002824:	eb04 0903 	add.w	r9, r4, r3
 8002828:	f000 fb60 	bl	8002eec <_sbrk_r>
 800282c:	4581      	cmp	r9, r0
 800282e:	d142      	bne.n	80028b6 <_malloc_r+0xea>
 8002830:	6821      	ldr	r1, [r4, #0]
 8002832:	4630      	mov	r0, r6
 8002834:	1a6d      	subs	r5, r5, r1
 8002836:	4629      	mov	r1, r5
 8002838:	f7ff ffa6 	bl	8002788 <sbrk_aligned>
 800283c:	3001      	adds	r0, #1
 800283e:	d03a      	beq.n	80028b6 <_malloc_r+0xea>
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	442b      	add	r3, r5
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	f8d8 3000 	ldr.w	r3, [r8]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	bb62      	cbnz	r2, 80028a8 <_malloc_r+0xdc>
 800284e:	f8c8 7000 	str.w	r7, [r8]
 8002852:	e00f      	b.n	8002874 <_malloc_r+0xa8>
 8002854:	6822      	ldr	r2, [r4, #0]
 8002856:	1b52      	subs	r2, r2, r5
 8002858:	d420      	bmi.n	800289c <_malloc_r+0xd0>
 800285a:	2a0b      	cmp	r2, #11
 800285c:	d917      	bls.n	800288e <_malloc_r+0xc2>
 800285e:	1961      	adds	r1, r4, r5
 8002860:	42a3      	cmp	r3, r4
 8002862:	6025      	str	r5, [r4, #0]
 8002864:	bf18      	it	ne
 8002866:	6059      	strne	r1, [r3, #4]
 8002868:	6863      	ldr	r3, [r4, #4]
 800286a:	bf08      	it	eq
 800286c:	f8c8 1000 	streq.w	r1, [r8]
 8002870:	5162      	str	r2, [r4, r5]
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	4630      	mov	r0, r6
 8002876:	f000 f82f 	bl	80028d8 <__malloc_unlock>
 800287a:	f104 000b 	add.w	r0, r4, #11
 800287e:	1d23      	adds	r3, r4, #4
 8002880:	f020 0007 	bic.w	r0, r0, #7
 8002884:	1ac2      	subs	r2, r0, r3
 8002886:	bf1c      	itt	ne
 8002888:	1a1b      	subne	r3, r3, r0
 800288a:	50a3      	strne	r3, [r4, r2]
 800288c:	e7af      	b.n	80027ee <_malloc_r+0x22>
 800288e:	6862      	ldr	r2, [r4, #4]
 8002890:	42a3      	cmp	r3, r4
 8002892:	bf0c      	ite	eq
 8002894:	f8c8 2000 	streq.w	r2, [r8]
 8002898:	605a      	strne	r2, [r3, #4]
 800289a:	e7eb      	b.n	8002874 <_malloc_r+0xa8>
 800289c:	4623      	mov	r3, r4
 800289e:	6864      	ldr	r4, [r4, #4]
 80028a0:	e7ae      	b.n	8002800 <_malloc_r+0x34>
 80028a2:	463c      	mov	r4, r7
 80028a4:	687f      	ldr	r7, [r7, #4]
 80028a6:	e7b6      	b.n	8002816 <_malloc_r+0x4a>
 80028a8:	461a      	mov	r2, r3
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	42a3      	cmp	r3, r4
 80028ae:	d1fb      	bne.n	80028a8 <_malloc_r+0xdc>
 80028b0:	2300      	movs	r3, #0
 80028b2:	6053      	str	r3, [r2, #4]
 80028b4:	e7de      	b.n	8002874 <_malloc_r+0xa8>
 80028b6:	230c      	movs	r3, #12
 80028b8:	4630      	mov	r0, r6
 80028ba:	6033      	str	r3, [r6, #0]
 80028bc:	f000 f80c 	bl	80028d8 <__malloc_unlock>
 80028c0:	e794      	b.n	80027ec <_malloc_r+0x20>
 80028c2:	6005      	str	r5, [r0, #0]
 80028c4:	e7d6      	b.n	8002874 <_malloc_r+0xa8>
 80028c6:	bf00      	nop
 80028c8:	200002a4 	.word	0x200002a4

080028cc <__malloc_lock>:
 80028cc:	4801      	ldr	r0, [pc, #4]	@ (80028d4 <__malloc_lock+0x8>)
 80028ce:	f7ff bf11 	b.w	80026f4 <__retarget_lock_acquire_recursive>
 80028d2:	bf00      	nop
 80028d4:	2000029c 	.word	0x2000029c

080028d8 <__malloc_unlock>:
 80028d8:	4801      	ldr	r0, [pc, #4]	@ (80028e0 <__malloc_unlock+0x8>)
 80028da:	f7ff bf0c 	b.w	80026f6 <__retarget_lock_release_recursive>
 80028de:	bf00      	nop
 80028e0:	2000029c 	.word	0x2000029c

080028e4 <__ssputs_r>:
 80028e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e8:	461f      	mov	r7, r3
 80028ea:	688e      	ldr	r6, [r1, #8]
 80028ec:	4682      	mov	sl, r0
 80028ee:	42be      	cmp	r6, r7
 80028f0:	460c      	mov	r4, r1
 80028f2:	4690      	mov	r8, r2
 80028f4:	680b      	ldr	r3, [r1, #0]
 80028f6:	d82d      	bhi.n	8002954 <__ssputs_r+0x70>
 80028f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80028fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002900:	d026      	beq.n	8002950 <__ssputs_r+0x6c>
 8002902:	6965      	ldr	r5, [r4, #20]
 8002904:	6909      	ldr	r1, [r1, #16]
 8002906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800290a:	eba3 0901 	sub.w	r9, r3, r1
 800290e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002912:	1c7b      	adds	r3, r7, #1
 8002914:	444b      	add	r3, r9
 8002916:	106d      	asrs	r5, r5, #1
 8002918:	429d      	cmp	r5, r3
 800291a:	bf38      	it	cc
 800291c:	461d      	movcc	r5, r3
 800291e:	0553      	lsls	r3, r2, #21
 8002920:	d527      	bpl.n	8002972 <__ssputs_r+0x8e>
 8002922:	4629      	mov	r1, r5
 8002924:	f7ff ff52 	bl	80027cc <_malloc_r>
 8002928:	4606      	mov	r6, r0
 800292a:	b360      	cbz	r0, 8002986 <__ssputs_r+0xa2>
 800292c:	464a      	mov	r2, r9
 800292e:	6921      	ldr	r1, [r4, #16]
 8002930:	f000 fafa 	bl	8002f28 <memcpy>
 8002934:	89a3      	ldrh	r3, [r4, #12]
 8002936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800293a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800293e:	81a3      	strh	r3, [r4, #12]
 8002940:	6126      	str	r6, [r4, #16]
 8002942:	444e      	add	r6, r9
 8002944:	6026      	str	r6, [r4, #0]
 8002946:	463e      	mov	r6, r7
 8002948:	6165      	str	r5, [r4, #20]
 800294a:	eba5 0509 	sub.w	r5, r5, r9
 800294e:	60a5      	str	r5, [r4, #8]
 8002950:	42be      	cmp	r6, r7
 8002952:	d900      	bls.n	8002956 <__ssputs_r+0x72>
 8002954:	463e      	mov	r6, r7
 8002956:	4632      	mov	r2, r6
 8002958:	4641      	mov	r1, r8
 800295a:	6820      	ldr	r0, [r4, #0]
 800295c:	f000 faac 	bl	8002eb8 <memmove>
 8002960:	2000      	movs	r0, #0
 8002962:	68a3      	ldr	r3, [r4, #8]
 8002964:	1b9b      	subs	r3, r3, r6
 8002966:	60a3      	str	r3, [r4, #8]
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	4433      	add	r3, r6
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002972:	462a      	mov	r2, r5
 8002974:	f000 fae6 	bl	8002f44 <_realloc_r>
 8002978:	4606      	mov	r6, r0
 800297a:	2800      	cmp	r0, #0
 800297c:	d1e0      	bne.n	8002940 <__ssputs_r+0x5c>
 800297e:	4650      	mov	r0, sl
 8002980:	6921      	ldr	r1, [r4, #16]
 8002982:	f7ff feb9 	bl	80026f8 <_free_r>
 8002986:	230c      	movs	r3, #12
 8002988:	f8ca 3000 	str.w	r3, [sl]
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	f04f 30ff 	mov.w	r0, #4294967295
 8002992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002996:	81a3      	strh	r3, [r4, #12]
 8002998:	e7e9      	b.n	800296e <__ssputs_r+0x8a>
	...

0800299c <_svfiprintf_r>:
 800299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a0:	4698      	mov	r8, r3
 80029a2:	898b      	ldrh	r3, [r1, #12]
 80029a4:	4607      	mov	r7, r0
 80029a6:	061b      	lsls	r3, r3, #24
 80029a8:	460d      	mov	r5, r1
 80029aa:	4614      	mov	r4, r2
 80029ac:	b09d      	sub	sp, #116	@ 0x74
 80029ae:	d510      	bpl.n	80029d2 <_svfiprintf_r+0x36>
 80029b0:	690b      	ldr	r3, [r1, #16]
 80029b2:	b973      	cbnz	r3, 80029d2 <_svfiprintf_r+0x36>
 80029b4:	2140      	movs	r1, #64	@ 0x40
 80029b6:	f7ff ff09 	bl	80027cc <_malloc_r>
 80029ba:	6028      	str	r0, [r5, #0]
 80029bc:	6128      	str	r0, [r5, #16]
 80029be:	b930      	cbnz	r0, 80029ce <_svfiprintf_r+0x32>
 80029c0:	230c      	movs	r3, #12
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	b01d      	add	sp, #116	@ 0x74
 80029ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ce:	2340      	movs	r3, #64	@ 0x40
 80029d0:	616b      	str	r3, [r5, #20]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80029d6:	2320      	movs	r3, #32
 80029d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80029dc:	2330      	movs	r3, #48	@ 0x30
 80029de:	f04f 0901 	mov.w	r9, #1
 80029e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80029e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002b80 <_svfiprintf_r+0x1e4>
 80029ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029ee:	4623      	mov	r3, r4
 80029f0:	469a      	mov	sl, r3
 80029f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029f6:	b10a      	cbz	r2, 80029fc <_svfiprintf_r+0x60>
 80029f8:	2a25      	cmp	r2, #37	@ 0x25
 80029fa:	d1f9      	bne.n	80029f0 <_svfiprintf_r+0x54>
 80029fc:	ebba 0b04 	subs.w	fp, sl, r4
 8002a00:	d00b      	beq.n	8002a1a <_svfiprintf_r+0x7e>
 8002a02:	465b      	mov	r3, fp
 8002a04:	4622      	mov	r2, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	4638      	mov	r0, r7
 8002a0a:	f7ff ff6b 	bl	80028e4 <__ssputs_r>
 8002a0e:	3001      	adds	r0, #1
 8002a10:	f000 80a7 	beq.w	8002b62 <_svfiprintf_r+0x1c6>
 8002a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a16:	445a      	add	r2, fp
 8002a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 809f 	beq.w	8002b62 <_svfiprintf_r+0x1c6>
 8002a24:	2300      	movs	r3, #0
 8002a26:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a2e:	f10a 0a01 	add.w	sl, sl, #1
 8002a32:	9304      	str	r3, [sp, #16]
 8002a34:	9307      	str	r3, [sp, #28]
 8002a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a3c:	4654      	mov	r4, sl
 8002a3e:	2205      	movs	r2, #5
 8002a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a44:	484e      	ldr	r0, [pc, #312]	@ (8002b80 <_svfiprintf_r+0x1e4>)
 8002a46:	f000 fa61 	bl	8002f0c <memchr>
 8002a4a:	9a04      	ldr	r2, [sp, #16]
 8002a4c:	b9d8      	cbnz	r0, 8002a86 <_svfiprintf_r+0xea>
 8002a4e:	06d0      	lsls	r0, r2, #27
 8002a50:	bf44      	itt	mi
 8002a52:	2320      	movmi	r3, #32
 8002a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a58:	0711      	lsls	r1, r2, #28
 8002a5a:	bf44      	itt	mi
 8002a5c:	232b      	movmi	r3, #43	@ 0x2b
 8002a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a62:	f89a 3000 	ldrb.w	r3, [sl]
 8002a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a68:	d015      	beq.n	8002a96 <_svfiprintf_r+0xfa>
 8002a6a:	4654      	mov	r4, sl
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f04f 0c0a 	mov.w	ip, #10
 8002a72:	9a07      	ldr	r2, [sp, #28]
 8002a74:	4621      	mov	r1, r4
 8002a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a7a:	3b30      	subs	r3, #48	@ 0x30
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	d94b      	bls.n	8002b18 <_svfiprintf_r+0x17c>
 8002a80:	b1b0      	cbz	r0, 8002ab0 <_svfiprintf_r+0x114>
 8002a82:	9207      	str	r2, [sp, #28]
 8002a84:	e014      	b.n	8002ab0 <_svfiprintf_r+0x114>
 8002a86:	eba0 0308 	sub.w	r3, r0, r8
 8002a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	46a2      	mov	sl, r4
 8002a92:	9304      	str	r3, [sp, #16]
 8002a94:	e7d2      	b.n	8002a3c <_svfiprintf_r+0xa0>
 8002a96:	9b03      	ldr	r3, [sp, #12]
 8002a98:	1d19      	adds	r1, r3, #4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	9103      	str	r1, [sp, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bfbb      	ittet	lt
 8002aa2:	425b      	neglt	r3, r3
 8002aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8002aa8:	9307      	strge	r3, [sp, #28]
 8002aaa:	9307      	strlt	r3, [sp, #28]
 8002aac:	bfb8      	it	lt
 8002aae:	9204      	strlt	r2, [sp, #16]
 8002ab0:	7823      	ldrb	r3, [r4, #0]
 8002ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ab4:	d10a      	bne.n	8002acc <_svfiprintf_r+0x130>
 8002ab6:	7863      	ldrb	r3, [r4, #1]
 8002ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002aba:	d132      	bne.n	8002b22 <_svfiprintf_r+0x186>
 8002abc:	9b03      	ldr	r3, [sp, #12]
 8002abe:	3402      	adds	r4, #2
 8002ac0:	1d1a      	adds	r2, r3, #4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	9203      	str	r2, [sp, #12]
 8002ac6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002aca:	9305      	str	r3, [sp, #20]
 8002acc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002b84 <_svfiprintf_r+0x1e8>
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4650      	mov	r0, sl
 8002ad4:	7821      	ldrb	r1, [r4, #0]
 8002ad6:	f000 fa19 	bl	8002f0c <memchr>
 8002ada:	b138      	cbz	r0, 8002aec <_svfiprintf_r+0x150>
 8002adc:	2240      	movs	r2, #64	@ 0x40
 8002ade:	9b04      	ldr	r3, [sp, #16]
 8002ae0:	eba0 000a 	sub.w	r0, r0, sl
 8002ae4:	4082      	lsls	r2, r0
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	3401      	adds	r4, #1
 8002aea:	9304      	str	r3, [sp, #16]
 8002aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002af0:	2206      	movs	r2, #6
 8002af2:	4825      	ldr	r0, [pc, #148]	@ (8002b88 <_svfiprintf_r+0x1ec>)
 8002af4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002af8:	f000 fa08 	bl	8002f0c <memchr>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d036      	beq.n	8002b6e <_svfiprintf_r+0x1d2>
 8002b00:	4b22      	ldr	r3, [pc, #136]	@ (8002b8c <_svfiprintf_r+0x1f0>)
 8002b02:	bb1b      	cbnz	r3, 8002b4c <_svfiprintf_r+0x1b0>
 8002b04:	9b03      	ldr	r3, [sp, #12]
 8002b06:	3307      	adds	r3, #7
 8002b08:	f023 0307 	bic.w	r3, r3, #7
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	9303      	str	r3, [sp, #12]
 8002b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b12:	4433      	add	r3, r6
 8002b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b16:	e76a      	b.n	80029ee <_svfiprintf_r+0x52>
 8002b18:	460c      	mov	r4, r1
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b20:	e7a8      	b.n	8002a74 <_svfiprintf_r+0xd8>
 8002b22:	2300      	movs	r3, #0
 8002b24:	f04f 0c0a 	mov.w	ip, #10
 8002b28:	4619      	mov	r1, r3
 8002b2a:	3401      	adds	r4, #1
 8002b2c:	9305      	str	r3, [sp, #20]
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b34:	3a30      	subs	r2, #48	@ 0x30
 8002b36:	2a09      	cmp	r2, #9
 8002b38:	d903      	bls.n	8002b42 <_svfiprintf_r+0x1a6>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0c6      	beq.n	8002acc <_svfiprintf_r+0x130>
 8002b3e:	9105      	str	r1, [sp, #20]
 8002b40:	e7c4      	b.n	8002acc <_svfiprintf_r+0x130>
 8002b42:	4604      	mov	r4, r0
 8002b44:	2301      	movs	r3, #1
 8002b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b4a:	e7f0      	b.n	8002b2e <_svfiprintf_r+0x192>
 8002b4c:	ab03      	add	r3, sp, #12
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	462a      	mov	r2, r5
 8002b52:	4638      	mov	r0, r7
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <_svfiprintf_r+0x1f4>)
 8002b56:	a904      	add	r1, sp, #16
 8002b58:	f3af 8000 	nop.w
 8002b5c:	1c42      	adds	r2, r0, #1
 8002b5e:	4606      	mov	r6, r0
 8002b60:	d1d6      	bne.n	8002b10 <_svfiprintf_r+0x174>
 8002b62:	89ab      	ldrh	r3, [r5, #12]
 8002b64:	065b      	lsls	r3, r3, #25
 8002b66:	f53f af2d 	bmi.w	80029c4 <_svfiprintf_r+0x28>
 8002b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b6c:	e72c      	b.n	80029c8 <_svfiprintf_r+0x2c>
 8002b6e:	ab03      	add	r3, sp, #12
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	462a      	mov	r2, r5
 8002b74:	4638      	mov	r0, r7
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <_svfiprintf_r+0x1f4>)
 8002b78:	a904      	add	r1, sp, #16
 8002b7a:	f000 f87d 	bl	8002c78 <_printf_i>
 8002b7e:	e7ed      	b.n	8002b5c <_svfiprintf_r+0x1c0>
 8002b80:	0800305e 	.word	0x0800305e
 8002b84:	08003064 	.word	0x08003064
 8002b88:	08003068 	.word	0x08003068
 8002b8c:	00000000 	.word	0x00000000
 8002b90:	080028e5 	.word	0x080028e5

08002b94 <_printf_common>:
 8002b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b98:	4616      	mov	r6, r2
 8002b9a:	4698      	mov	r8, r3
 8002b9c:	688a      	ldr	r2, [r1, #8]
 8002b9e:	690b      	ldr	r3, [r1, #16]
 8002ba0:	4607      	mov	r7, r0
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	bfb8      	it	lt
 8002ba6:	4613      	movlt	r3, r2
 8002ba8:	6033      	str	r3, [r6, #0]
 8002baa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002bae:	460c      	mov	r4, r1
 8002bb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002bb4:	b10a      	cbz	r2, 8002bba <_printf_common+0x26>
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	6033      	str	r3, [r6, #0]
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	0699      	lsls	r1, r3, #26
 8002bbe:	bf42      	ittt	mi
 8002bc0:	6833      	ldrmi	r3, [r6, #0]
 8002bc2:	3302      	addmi	r3, #2
 8002bc4:	6033      	strmi	r3, [r6, #0]
 8002bc6:	6825      	ldr	r5, [r4, #0]
 8002bc8:	f015 0506 	ands.w	r5, r5, #6
 8002bcc:	d106      	bne.n	8002bdc <_printf_common+0x48>
 8002bce:	f104 0a19 	add.w	sl, r4, #25
 8002bd2:	68e3      	ldr	r3, [r4, #12]
 8002bd4:	6832      	ldr	r2, [r6, #0]
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	42ab      	cmp	r3, r5
 8002bda:	dc2b      	bgt.n	8002c34 <_printf_common+0xa0>
 8002bdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002be0:	6822      	ldr	r2, [r4, #0]
 8002be2:	3b00      	subs	r3, #0
 8002be4:	bf18      	it	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	0692      	lsls	r2, r2, #26
 8002bea:	d430      	bmi.n	8002c4e <_printf_common+0xba>
 8002bec:	4641      	mov	r1, r8
 8002bee:	4638      	mov	r0, r7
 8002bf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bf4:	47c8      	blx	r9
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	d023      	beq.n	8002c42 <_printf_common+0xae>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	6922      	ldr	r2, [r4, #16]
 8002bfe:	f003 0306 	and.w	r3, r3, #6
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf14      	ite	ne
 8002c06:	2500      	movne	r5, #0
 8002c08:	6833      	ldreq	r3, [r6, #0]
 8002c0a:	f04f 0600 	mov.w	r6, #0
 8002c0e:	bf08      	it	eq
 8002c10:	68e5      	ldreq	r5, [r4, #12]
 8002c12:	f104 041a 	add.w	r4, r4, #26
 8002c16:	bf08      	it	eq
 8002c18:	1aed      	subeq	r5, r5, r3
 8002c1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c1e:	bf08      	it	eq
 8002c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c24:	4293      	cmp	r3, r2
 8002c26:	bfc4      	itt	gt
 8002c28:	1a9b      	subgt	r3, r3, r2
 8002c2a:	18ed      	addgt	r5, r5, r3
 8002c2c:	42b5      	cmp	r5, r6
 8002c2e:	d11a      	bne.n	8002c66 <_printf_common+0xd2>
 8002c30:	2000      	movs	r0, #0
 8002c32:	e008      	b.n	8002c46 <_printf_common+0xb2>
 8002c34:	2301      	movs	r3, #1
 8002c36:	4652      	mov	r2, sl
 8002c38:	4641      	mov	r1, r8
 8002c3a:	4638      	mov	r0, r7
 8002c3c:	47c8      	blx	r9
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d103      	bne.n	8002c4a <_printf_common+0xb6>
 8002c42:	f04f 30ff 	mov.w	r0, #4294967295
 8002c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c4a:	3501      	adds	r5, #1
 8002c4c:	e7c1      	b.n	8002bd2 <_printf_common+0x3e>
 8002c4e:	2030      	movs	r0, #48	@ 0x30
 8002c50:	18e1      	adds	r1, r4, r3
 8002c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c5c:	4422      	add	r2, r4
 8002c5e:	3302      	adds	r3, #2
 8002c60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c64:	e7c2      	b.n	8002bec <_printf_common+0x58>
 8002c66:	2301      	movs	r3, #1
 8002c68:	4622      	mov	r2, r4
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	4638      	mov	r0, r7
 8002c6e:	47c8      	blx	r9
 8002c70:	3001      	adds	r0, #1
 8002c72:	d0e6      	beq.n	8002c42 <_printf_common+0xae>
 8002c74:	3601      	adds	r6, #1
 8002c76:	e7d9      	b.n	8002c2c <_printf_common+0x98>

08002c78 <_printf_i>:
 8002c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	7e0f      	ldrb	r7, [r1, #24]
 8002c7e:	4691      	mov	r9, r2
 8002c80:	2f78      	cmp	r7, #120	@ 0x78
 8002c82:	4680      	mov	r8, r0
 8002c84:	460c      	mov	r4, r1
 8002c86:	469a      	mov	sl, r3
 8002c88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c8e:	d807      	bhi.n	8002ca0 <_printf_i+0x28>
 8002c90:	2f62      	cmp	r7, #98	@ 0x62
 8002c92:	d80a      	bhi.n	8002caa <_printf_i+0x32>
 8002c94:	2f00      	cmp	r7, #0
 8002c96:	f000 80d3 	beq.w	8002e40 <_printf_i+0x1c8>
 8002c9a:	2f58      	cmp	r7, #88	@ 0x58
 8002c9c:	f000 80ba 	beq.w	8002e14 <_printf_i+0x19c>
 8002ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002ca8:	e03a      	b.n	8002d20 <_printf_i+0xa8>
 8002caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002cae:	2b15      	cmp	r3, #21
 8002cb0:	d8f6      	bhi.n	8002ca0 <_printf_i+0x28>
 8002cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8002cb8 <_printf_i+0x40>)
 8002cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cb8:	08002d11 	.word	0x08002d11
 8002cbc:	08002d25 	.word	0x08002d25
 8002cc0:	08002ca1 	.word	0x08002ca1
 8002cc4:	08002ca1 	.word	0x08002ca1
 8002cc8:	08002ca1 	.word	0x08002ca1
 8002ccc:	08002ca1 	.word	0x08002ca1
 8002cd0:	08002d25 	.word	0x08002d25
 8002cd4:	08002ca1 	.word	0x08002ca1
 8002cd8:	08002ca1 	.word	0x08002ca1
 8002cdc:	08002ca1 	.word	0x08002ca1
 8002ce0:	08002ca1 	.word	0x08002ca1
 8002ce4:	08002e27 	.word	0x08002e27
 8002ce8:	08002d4f 	.word	0x08002d4f
 8002cec:	08002de1 	.word	0x08002de1
 8002cf0:	08002ca1 	.word	0x08002ca1
 8002cf4:	08002ca1 	.word	0x08002ca1
 8002cf8:	08002e49 	.word	0x08002e49
 8002cfc:	08002ca1 	.word	0x08002ca1
 8002d00:	08002d4f 	.word	0x08002d4f
 8002d04:	08002ca1 	.word	0x08002ca1
 8002d08:	08002ca1 	.word	0x08002ca1
 8002d0c:	08002de9 	.word	0x08002de9
 8002d10:	6833      	ldr	r3, [r6, #0]
 8002d12:	1d1a      	adds	r2, r3, #4
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6032      	str	r2, [r6, #0]
 8002d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d20:	2301      	movs	r3, #1
 8002d22:	e09e      	b.n	8002e62 <_printf_i+0x1ea>
 8002d24:	6833      	ldr	r3, [r6, #0]
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	1d19      	adds	r1, r3, #4
 8002d2a:	6031      	str	r1, [r6, #0]
 8002d2c:	0606      	lsls	r6, r0, #24
 8002d2e:	d501      	bpl.n	8002d34 <_printf_i+0xbc>
 8002d30:	681d      	ldr	r5, [r3, #0]
 8002d32:	e003      	b.n	8002d3c <_printf_i+0xc4>
 8002d34:	0645      	lsls	r5, r0, #25
 8002d36:	d5fb      	bpl.n	8002d30 <_printf_i+0xb8>
 8002d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	da03      	bge.n	8002d48 <_printf_i+0xd0>
 8002d40:	232d      	movs	r3, #45	@ 0x2d
 8002d42:	426d      	negs	r5, r5
 8002d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d48:	230a      	movs	r3, #10
 8002d4a:	4859      	ldr	r0, [pc, #356]	@ (8002eb0 <_printf_i+0x238>)
 8002d4c:	e011      	b.n	8002d72 <_printf_i+0xfa>
 8002d4e:	6821      	ldr	r1, [r4, #0]
 8002d50:	6833      	ldr	r3, [r6, #0]
 8002d52:	0608      	lsls	r0, r1, #24
 8002d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d58:	d402      	bmi.n	8002d60 <_printf_i+0xe8>
 8002d5a:	0649      	lsls	r1, r1, #25
 8002d5c:	bf48      	it	mi
 8002d5e:	b2ad      	uxthmi	r5, r5
 8002d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d62:	6033      	str	r3, [r6, #0]
 8002d64:	bf14      	ite	ne
 8002d66:	230a      	movne	r3, #10
 8002d68:	2308      	moveq	r3, #8
 8002d6a:	4851      	ldr	r0, [pc, #324]	@ (8002eb0 <_printf_i+0x238>)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d72:	6866      	ldr	r6, [r4, #4]
 8002d74:	2e00      	cmp	r6, #0
 8002d76:	bfa8      	it	ge
 8002d78:	6821      	ldrge	r1, [r4, #0]
 8002d7a:	60a6      	str	r6, [r4, #8]
 8002d7c:	bfa4      	itt	ge
 8002d7e:	f021 0104 	bicge.w	r1, r1, #4
 8002d82:	6021      	strge	r1, [r4, #0]
 8002d84:	b90d      	cbnz	r5, 8002d8a <_printf_i+0x112>
 8002d86:	2e00      	cmp	r6, #0
 8002d88:	d04b      	beq.n	8002e22 <_printf_i+0x1aa>
 8002d8a:	4616      	mov	r6, r2
 8002d8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d90:	fb03 5711 	mls	r7, r3, r1, r5
 8002d94:	5dc7      	ldrb	r7, [r0, r7]
 8002d96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d9a:	462f      	mov	r7, r5
 8002d9c:	42bb      	cmp	r3, r7
 8002d9e:	460d      	mov	r5, r1
 8002da0:	d9f4      	bls.n	8002d8c <_printf_i+0x114>
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d10b      	bne.n	8002dbe <_printf_i+0x146>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	07df      	lsls	r7, r3, #31
 8002daa:	d508      	bpl.n	8002dbe <_printf_i+0x146>
 8002dac:	6923      	ldr	r3, [r4, #16]
 8002dae:	6861      	ldr	r1, [r4, #4]
 8002db0:	4299      	cmp	r1, r3
 8002db2:	bfde      	ittt	le
 8002db4:	2330      	movle	r3, #48	@ 0x30
 8002db6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002dba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002dbe:	1b92      	subs	r2, r2, r6
 8002dc0:	6122      	str	r2, [r4, #16]
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	4640      	mov	r0, r8
 8002dc8:	f8cd a000 	str.w	sl, [sp]
 8002dcc:	aa03      	add	r2, sp, #12
 8002dce:	f7ff fee1 	bl	8002b94 <_printf_common>
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d14a      	bne.n	8002e6c <_printf_i+0x1f4>
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	b004      	add	sp, #16
 8002ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	f043 0320 	orr.w	r3, r3, #32
 8002de6:	6023      	str	r3, [r4, #0]
 8002de8:	2778      	movs	r7, #120	@ 0x78
 8002dea:	4832      	ldr	r0, [pc, #200]	@ (8002eb4 <_printf_i+0x23c>)
 8002dec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	6831      	ldr	r1, [r6, #0]
 8002df4:	061f      	lsls	r7, r3, #24
 8002df6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002dfa:	d402      	bmi.n	8002e02 <_printf_i+0x18a>
 8002dfc:	065f      	lsls	r7, r3, #25
 8002dfe:	bf48      	it	mi
 8002e00:	b2ad      	uxthmi	r5, r5
 8002e02:	6031      	str	r1, [r6, #0]
 8002e04:	07d9      	lsls	r1, r3, #31
 8002e06:	bf44      	itt	mi
 8002e08:	f043 0320 	orrmi.w	r3, r3, #32
 8002e0c:	6023      	strmi	r3, [r4, #0]
 8002e0e:	b11d      	cbz	r5, 8002e18 <_printf_i+0x1a0>
 8002e10:	2310      	movs	r3, #16
 8002e12:	e7ab      	b.n	8002d6c <_printf_i+0xf4>
 8002e14:	4826      	ldr	r0, [pc, #152]	@ (8002eb0 <_printf_i+0x238>)
 8002e16:	e7e9      	b.n	8002dec <_printf_i+0x174>
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	f023 0320 	bic.w	r3, r3, #32
 8002e1e:	6023      	str	r3, [r4, #0]
 8002e20:	e7f6      	b.n	8002e10 <_printf_i+0x198>
 8002e22:	4616      	mov	r6, r2
 8002e24:	e7bd      	b.n	8002da2 <_printf_i+0x12a>
 8002e26:	6833      	ldr	r3, [r6, #0]
 8002e28:	6825      	ldr	r5, [r4, #0]
 8002e2a:	1d18      	adds	r0, r3, #4
 8002e2c:	6961      	ldr	r1, [r4, #20]
 8002e2e:	6030      	str	r0, [r6, #0]
 8002e30:	062e      	lsls	r6, r5, #24
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	d501      	bpl.n	8002e3a <_printf_i+0x1c2>
 8002e36:	6019      	str	r1, [r3, #0]
 8002e38:	e002      	b.n	8002e40 <_printf_i+0x1c8>
 8002e3a:	0668      	lsls	r0, r5, #25
 8002e3c:	d5fb      	bpl.n	8002e36 <_printf_i+0x1be>
 8002e3e:	8019      	strh	r1, [r3, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	4616      	mov	r6, r2
 8002e44:	6123      	str	r3, [r4, #16]
 8002e46:	e7bc      	b.n	8002dc2 <_printf_i+0x14a>
 8002e48:	6833      	ldr	r3, [r6, #0]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	1d1a      	adds	r2, r3, #4
 8002e4e:	6032      	str	r2, [r6, #0]
 8002e50:	681e      	ldr	r6, [r3, #0]
 8002e52:	6862      	ldr	r2, [r4, #4]
 8002e54:	4630      	mov	r0, r6
 8002e56:	f000 f859 	bl	8002f0c <memchr>
 8002e5a:	b108      	cbz	r0, 8002e60 <_printf_i+0x1e8>
 8002e5c:	1b80      	subs	r0, r0, r6
 8002e5e:	6060      	str	r0, [r4, #4]
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	6123      	str	r3, [r4, #16]
 8002e64:	2300      	movs	r3, #0
 8002e66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e6a:	e7aa      	b.n	8002dc2 <_printf_i+0x14a>
 8002e6c:	4632      	mov	r2, r6
 8002e6e:	4649      	mov	r1, r9
 8002e70:	4640      	mov	r0, r8
 8002e72:	6923      	ldr	r3, [r4, #16]
 8002e74:	47d0      	blx	sl
 8002e76:	3001      	adds	r0, #1
 8002e78:	d0ad      	beq.n	8002dd6 <_printf_i+0x15e>
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	079b      	lsls	r3, r3, #30
 8002e7e:	d413      	bmi.n	8002ea8 <_printf_i+0x230>
 8002e80:	68e0      	ldr	r0, [r4, #12]
 8002e82:	9b03      	ldr	r3, [sp, #12]
 8002e84:	4298      	cmp	r0, r3
 8002e86:	bfb8      	it	lt
 8002e88:	4618      	movlt	r0, r3
 8002e8a:	e7a6      	b.n	8002dda <_printf_i+0x162>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	4632      	mov	r2, r6
 8002e90:	4649      	mov	r1, r9
 8002e92:	4640      	mov	r0, r8
 8002e94:	47d0      	blx	sl
 8002e96:	3001      	adds	r0, #1
 8002e98:	d09d      	beq.n	8002dd6 <_printf_i+0x15e>
 8002e9a:	3501      	adds	r5, #1
 8002e9c:	68e3      	ldr	r3, [r4, #12]
 8002e9e:	9903      	ldr	r1, [sp, #12]
 8002ea0:	1a5b      	subs	r3, r3, r1
 8002ea2:	42ab      	cmp	r3, r5
 8002ea4:	dcf2      	bgt.n	8002e8c <_printf_i+0x214>
 8002ea6:	e7eb      	b.n	8002e80 <_printf_i+0x208>
 8002ea8:	2500      	movs	r5, #0
 8002eaa:	f104 0619 	add.w	r6, r4, #25
 8002eae:	e7f5      	b.n	8002e9c <_printf_i+0x224>
 8002eb0:	0800306f 	.word	0x0800306f
 8002eb4:	08003080 	.word	0x08003080

08002eb8 <memmove>:
 8002eb8:	4288      	cmp	r0, r1
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	eb01 0402 	add.w	r4, r1, r2
 8002ec0:	d902      	bls.n	8002ec8 <memmove+0x10>
 8002ec2:	4284      	cmp	r4, r0
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	d807      	bhi.n	8002ed8 <memmove+0x20>
 8002ec8:	1e43      	subs	r3, r0, #1
 8002eca:	42a1      	cmp	r1, r4
 8002ecc:	d008      	beq.n	8002ee0 <memmove+0x28>
 8002ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ed6:	e7f8      	b.n	8002eca <memmove+0x12>
 8002ed8:	4601      	mov	r1, r0
 8002eda:	4402      	add	r2, r0
 8002edc:	428a      	cmp	r2, r1
 8002ede:	d100      	bne.n	8002ee2 <memmove+0x2a>
 8002ee0:	bd10      	pop	{r4, pc}
 8002ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002eea:	e7f7      	b.n	8002edc <memmove+0x24>

08002eec <_sbrk_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4d05      	ldr	r5, [pc, #20]	@ (8002f08 <_sbrk_r+0x1c>)
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	602b      	str	r3, [r5, #0]
 8002ef8:	f7fd fc84 	bl	8000804 <_sbrk>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_sbrk_r+0x1a>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_sbrk_r+0x1a>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	20000298 	.word	0x20000298

08002f0c <memchr>:
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b510      	push	{r4, lr}
 8002f10:	b2c9      	uxtb	r1, r1
 8002f12:	4402      	add	r2, r0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	d101      	bne.n	8002f1e <memchr+0x12>
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	e003      	b.n	8002f26 <memchr+0x1a>
 8002f1e:	7804      	ldrb	r4, [r0, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	428c      	cmp	r4, r1
 8002f24:	d1f6      	bne.n	8002f14 <memchr+0x8>
 8002f26:	bd10      	pop	{r4, pc}

08002f28 <memcpy>:
 8002f28:	440a      	add	r2, r1
 8002f2a:	4291      	cmp	r1, r2
 8002f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f30:	d100      	bne.n	8002f34 <memcpy+0xc>
 8002f32:	4770      	bx	lr
 8002f34:	b510      	push	{r4, lr}
 8002f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f3a:	4291      	cmp	r1, r2
 8002f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f40:	d1f9      	bne.n	8002f36 <memcpy+0xe>
 8002f42:	bd10      	pop	{r4, pc}

08002f44 <_realloc_r>:
 8002f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f48:	4680      	mov	r8, r0
 8002f4a:	4615      	mov	r5, r2
 8002f4c:	460c      	mov	r4, r1
 8002f4e:	b921      	cbnz	r1, 8002f5a <_realloc_r+0x16>
 8002f50:	4611      	mov	r1, r2
 8002f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f56:	f7ff bc39 	b.w	80027cc <_malloc_r>
 8002f5a:	b92a      	cbnz	r2, 8002f68 <_realloc_r+0x24>
 8002f5c:	f7ff fbcc 	bl	80026f8 <_free_r>
 8002f60:	2400      	movs	r4, #0
 8002f62:	4620      	mov	r0, r4
 8002f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f68:	f000 f81a 	bl	8002fa0 <_malloc_usable_size_r>
 8002f6c:	4285      	cmp	r5, r0
 8002f6e:	4606      	mov	r6, r0
 8002f70:	d802      	bhi.n	8002f78 <_realloc_r+0x34>
 8002f72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002f76:	d8f4      	bhi.n	8002f62 <_realloc_r+0x1e>
 8002f78:	4629      	mov	r1, r5
 8002f7a:	4640      	mov	r0, r8
 8002f7c:	f7ff fc26 	bl	80027cc <_malloc_r>
 8002f80:	4607      	mov	r7, r0
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d0ec      	beq.n	8002f60 <_realloc_r+0x1c>
 8002f86:	42b5      	cmp	r5, r6
 8002f88:	462a      	mov	r2, r5
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	bf28      	it	cs
 8002f8e:	4632      	movcs	r2, r6
 8002f90:	f7ff ffca 	bl	8002f28 <memcpy>
 8002f94:	4621      	mov	r1, r4
 8002f96:	4640      	mov	r0, r8
 8002f98:	f7ff fbae 	bl	80026f8 <_free_r>
 8002f9c:	463c      	mov	r4, r7
 8002f9e:	e7e0      	b.n	8002f62 <_realloc_r+0x1e>

08002fa0 <_malloc_usable_size_r>:
 8002fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa4:	1f18      	subs	r0, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bfbc      	itt	lt
 8002faa:	580b      	ldrlt	r3, [r1, r0]
 8002fac:	18c0      	addlt	r0, r0, r3
 8002fae:	4770      	bx	lr

08002fb0 <_init>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	bf00      	nop
 8002fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb6:	bc08      	pop	{r3}
 8002fb8:	469e      	mov	lr, r3
 8002fba:	4770      	bx	lr

08002fbc <_fini>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr
